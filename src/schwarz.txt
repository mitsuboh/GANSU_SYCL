/*
 * GANSU: GPU Acclerated Numerical Simulation Utility
 *
 * Copyright (c) 2025, Hiroshima University and Fujitsu Limited
 * All rights reserved.
 *
 * This software is licensed under the BSD 3-Clause License.
 * You may obtain a copy of the license in the LICENSE file
 * located in the root directory of this source tree or at:
 * https://opensource.org/licenses/BSD-3-Clause
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */


#define SP_TYPES 3
#define PP_TYPES 9

#include "int2c2e.hpp"
    // 順序合わせたやつ
__constant__ int loop_to_ang_RI_[7][28][3] = {
    {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}},
    {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}},
    {{2, 0, 0}, {0, 2, 0}, {0, 0, 2}, {1, 1, 0}, {1, 0, 1}, {0, 1, 1}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}},
    {{3,0,0}, {0,3,0}, {0,0,3}, {2,1,0}, {2,0,1}, {0,2,1}, {1,2,0}, {0,1,2}, {1,0,2}, {1,1,1}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}},
    {{4, 0, 0}, {0, 4, 0}, {0, 0, 4}, {3,1,0}, {3,0,1}, {0,3,1}, {1,3,0}, {0,1,3}, {1,0,3}, {2,2,0}, {2,0,2}, {0,2,2}, {2,1,1}, {1,2,1}, {1,1,2}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}},
    {{5, 0, 0}, {4, 1, 0}, {3, 2, 0}, {2, 3, 0}, {1, 4, 0}, {0, 5, 0}, {4, 0, 1}, {3, 1, 1}, {2, 2, 1}, {1, 3, 1}, {0, 4, 1}, {3, 0, 2}, {2, 1, 2}, {1, 2, 2}, {0, 3, 2}, {2, 0, 3}, {1, 1, 3}, {0, 2, 3}, {1, 0, 4}, {0, 1, 4}, {0, 0, 5}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}},
    {{6, 0, 0}, {5, 1, 0}, {4, 2, 0}, {3, 3, 0}, {2, 4, 0}, {1, 5, 0}, {0, 6, 0}, {5, 0, 1}, {4, 1, 1}, {3, 2, 1}, {2, 3, 1}, {1, 4, 1}, {0, 5, 1}, {4, 0, 2}, {3, 1, 2}, {2, 2, 2}, {1, 3, 2}, {0, 4, 2}, {3, 0, 3}, {2, 1, 3}, {1, 2, 3}, {0, 3, 3}, {2, 0, 4}, {1, 1, 4}, {0, 2, 4}, {1, 0, 5}, {0, 1, 5}, {0, 0, 6}}
};

__device__
double calculate_upper_bound_factor_ss(
    PrimitiveShell a, PrimitiveShell b, const double* g_boys_grid)
{
    const PrimitiveShell c = a;
    const PrimitiveShell d = b;
    const double Rp[3] = {(a.exponent*a.coordinate.x + b.exponent*b.coordinate.x)/(a.exponent+b.exponent), (a.exponent*a.coordinate.y + b.exponent*b.coordinate.y)/(a.exponent+b.exponent), (a.exponent*a.coordinate.z + b.exponent*b.coordinate.z)/(a.exponent+b.exponent)};
    const double Rq[3] = {(c.exponent*c.coordinate.x + d.exponent*d.coordinate.x)/(c.exponent+d.exponent), (c.exponent*c.coordinate.y + d.exponent*d.coordinate.y)/(c.exponent+d.exponent), (c.exponent*c.coordinate.z + d.exponent*d.coordinate.z)/(c.exponent+d.exponent)};

    return a.coefficient * b.coefficient* c.coefficient * d.coefficient
           * calcNorms(a.exponent, b.exponent, c.exponent, d.exponent, 0,0,0, 0,0,0, 0,0,0, 0,0,0)
           * 2.0*pow(M_PI,2.5)/((a.exponent+b.exponent)*(c.exponent+d.exponent)*pow(a.exponent + b.exponent + c.exponent + d.exponent,0.5))
           * exp(-(a.exponent*b.exponent)*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x) + (a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y) + (a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))/(a.exponent+b.exponent)
           -(c.exponent*d.exponent)*((c.coordinate.x-d.coordinate.x)*(c.coordinate.x-d.coordinate.x) + (c.coordinate.y-d.coordinate.y)*(c.coordinate.y-d.coordinate.y) + (c.coordinate.z-d.coordinate.z)*(c.coordinate.z-d.coordinate.z))/(c.exponent+d.exponent))
           * getSingleBoys(0, (a.exponent+b.exponent)*(c.exponent+d.exponent)/(a.exponent+b.exponent+c.exponent+d.exponent)*((Rp[0]-Rq[0])*(Rp[0]-Rq[0])+((Rp[1]-Rq[1])*(Rp[1]-Rq[1]))+(Rp[2]-Rq[2])*(Rp[2]-Rq[2])), g_boys_grid);
}

__device__
void calculate_upper_bound_factors_sp(
    PrimitiveShell a, PrimitiveShell b, const double* g_boys_grid, double* upper_bound_factors)
{
    const PrimitiveShell c = a;
    const PrimitiveShell d = b;
    const double p = a.exponent+b.exponent;
    const double q = c.exponent+d.exponent;
    const double Rp[3] = {(a.exponent*a.coordinate.x + b.exponent*b.coordinate.x)/p, (a.exponent*a.coordinate.y + b.exponent*b.coordinate.y)/p, (a.exponent*a.coordinate.z + b.exponent*b.coordinate.z)/p};
    const double Rq[3] = {(c.exponent*c.coordinate.x + d.exponent*d.coordinate.x)/q, (c.exponent*c.coordinate.y + d.exponent*d.coordinate.y)/q, (c.exponent*c.coordinate.z + d.exponent*d.coordinate.z)/q};
    double Boys[3];
    getIncrementalBoys(2, p*q/(p+q)*((Rp[0]-Rq[0])*(Rp[0]-Rq[0]) + (Rp[1]-Rq[1])*(Rp[1]-Rq[1]) + (Rp[2]-Rq[2])*(Rp[2]-Rq[2])), g_boys_grid, Boys);
    const double coefAndNorm = a.coefficient * b.coefficient* c.coefficient * d.coefficient
                               * calcNorms(a.exponent, b.exponent, c.exponent, d.exponent, 0,0,0, 1,0,0, 0,0,0, 1,0,0)
                               * 2.0*pow(M_PI,2.5)/(p*q*pow(p+q,0.5))
                               * exp(-(a.exponent*b.exponent)*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x) + (a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y) + (a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))/p
                               -(c.exponent*d.exponent)*((c.coordinate.x-d.coordinate.x)*(c.coordinate.x-d.coordinate.x) + (c.coordinate.y-d.coordinate.y)*(c.coordinate.y-d.coordinate.y) + (c.coordinate.z-d.coordinate.z)*(c.coordinate.z-d.coordinate.z))/q);
    
    upper_bound_factors[0] = coefAndNorm * (((a.coordinate.x - b.coordinate.x)*(c.coordinate.x - d.coordinate.x) + (a.coordinate.x - b.coordinate.x)*(Rq[0] - c.coordinate.x) + (c.coordinate.x - d.coordinate.x)*(Rp[0] - a.coordinate.x) + (Rp[0] - a.coordinate.x)*(Rq[0] - c.coordinate.x)) * Boys[0]
                + (0.5*(2.0*(a.coordinate.x - b.coordinate.x)*(Rp[0]-Rq[0])*p - 2.0*(c.coordinate.x - d.coordinate.x)*(Rp[0]-Rq[0])*q + 2.0*(Rp[0] - a.coordinate.x)*(Rp[0]-Rq[0])*p - 2.0*(Rp[0]-Rq[0])*(Rq[0] - c.coordinate.x)*q + 1.0)/(p + q)) * Boys[1]
                + (-((Rp[0]-Rq[0])*(Rp[0]-Rq[0]))*p*q/((p*p) + 2.0*p*q + (q*q))) * Boys[2]);
    upper_bound_factors[1] = coefAndNorm * (((a.coordinate.y - b.coordinate.y)*(c.coordinate.y - d.coordinate.y) + (a.coordinate.y - b.coordinate.y)*(Rq[1] - c.coordinate.y) + (c.coordinate.y - d.coordinate.y)*(Rp[1] - a.coordinate.y) + (Rp[1] - a.coordinate.y)*(Rq[1] - c.coordinate.y)) * Boys[0]
                + (0.5*(2.0*(a.coordinate.y - b.coordinate.y)*(Rp[1]-Rq[1])*p - 2.0*(c.coordinate.y - d.coordinate.y)*(Rp[1]-Rq[1])*q + 2.0*(Rp[1] - a.coordinate.y)*(Rp[1]-Rq[1])*p - 2.0*(Rp[1]-Rq[1])*(Rq[1] - c.coordinate.y)*q + 1.0)/(p + q)) * Boys[1]
                + (-((Rp[1]-Rq[1])*(Rp[1]-Rq[1]))*p*q/((p*p) + 2.0*p*q + (q*q))) * Boys[2]);
    upper_bound_factors[2] = coefAndNorm * (((a.coordinate.z - b.coordinate.z)*(c.coordinate.z - d.coordinate.z) + (a.coordinate.z - b.coordinate.z)*(Rq[2] - c.coordinate.z) + (c.coordinate.z - d.coordinate.z)*(Rp[2] - a.coordinate.z) + (Rp[2] - a.coordinate.z)*(Rq[2] - c.coordinate.z)) * Boys[0]
                + (0.5*(2.0*(a.coordinate.z - b.coordinate.z)*(Rp[2]-Rq[2])*p - 2.0*(c.coordinate.z - d.coordinate.z)*(Rp[2]-Rq[2])*q + 2.0*(Rp[2] - a.coordinate.z)*(Rp[2]-Rq[2])*p - 2.0*(Rp[2]-Rq[2])*(Rq[2] - c.coordinate.z)*q + 1.0)/(p + q)) * Boys[1]
                + (-((Rp[2]-Rq[2])*(Rp[2]-Rq[2]))*p*q/((p*p) + 2.0*p*q + (q*q))) * Boys[2]);
}


__device__
void calculate_upper_bound_factors_pp(
    PrimitiveShell a, PrimitiveShell b, const double* g_boys_grid, double* upper_bound_factors)
{
    const PrimitiveShell c = a;
    const PrimitiveShell d = b;
    const double p = a.exponent+b.exponent;
    const double q = c.exponent+d.exponent;
    const double Rp[3] = {(a.exponent*a.coordinate.x + b.exponent*b.coordinate.x)/p, (a.exponent*a.coordinate.y + b.exponent*b.coordinate.y)/p, (a.exponent*a.coordinate.z + b.exponent*b.coordinate.z)/p};
    const double Rq[3] = {(c.exponent*c.coordinate.x + d.exponent*d.coordinate.x)/q, (c.exponent*c.coordinate.y + d.exponent*d.coordinate.y)/q, (c.exponent*c.coordinate.z + d.exponent*d.coordinate.z)/q};
    double Boys[5];
    getIncrementalBoys(4, p*q/(p+q)*((Rp[0]-Rq[0])*(Rp[0]-Rq[0]) + (Rp[1]-Rq[1])*(Rp[1]-Rq[1]) + (Rp[2]-Rq[2])*(Rp[2]-Rq[2])), g_boys_grid, Boys);
    const double coefAndNorm = a.coefficient * b.coefficient* c.coefficient * d.coefficient
                               * calcNorms(a.exponent, b.exponent, c.exponent, d.exponent, 0,0,1, 0,0,1, 0,0,1, 0,0,1)
                               * 2.0*pow(M_PI,2.5)/(p*q*pow(p+q,0.5))
                               * exp(-(a.exponent*b.exponent)*((a.coordinate.x-b.coordinate.x)*(a.coordinate.x-b.coordinate.x) + (a.coordinate.y-b.coordinate.y)*(a.coordinate.y-b.coordinate.y) + (a.coordinate.z-b.coordinate.z)*(a.coordinate.z-b.coordinate.z))/p
                               -(c.exponent*d.exponent)*((c.coordinate.x-d.coordinate.x)*(c.coordinate.x-d.coordinate.x) + (c.coordinate.y-d.coordinate.y)*(c.coordinate.y-d.coordinate.y) + (c.coordinate.z-d.coordinate.z)*(c.coordinate.z-d.coordinate.z))/q);
    // [xx|xx] = [00|00]
    upper_bound_factors[0] = coefAndNorm * (((a.coordinate.x - b.coordinate.x)*(c.coordinate.x - d.coordinate.x)*(Rp[0] - a.coordinate.x)*(Rq[0] - c.coordinate.x) + (a.coordinate.x - b.coordinate.x)*(Rp[0] - a.coordinate.x)*((Rq[0] - c.coordinate.x)*(Rq[0] - c.coordinate.x)) + 0.5*(a.coordinate.x - b.coordinate.x)*(Rp[0] - a.coordinate.x)/q + (c.coordinate.x - d.coordinate.x)*((Rp[0] - a.coordinate.x)*(Rp[0] - a.coordinate.x))*(Rq[0] - c.coordinate.x) + 0.5*(c.coordinate.x - d.coordinate.x)*(Rq[0] - c.coordinate.x)/p + ((Rp[0] - a.coordinate.x)*(Rp[0] - a.coordinate.x))*((Rq[0] - c.coordinate.x)*(Rq[0] - c.coordinate.x)) + 0.5*((Rp[0] - a.coordinate.x)*(Rp[0] - a.coordinate.x))/q + 0.5*((Rq[0] - c.coordinate.x)*(Rq[0] - c.coordinate.x))/p + 0.25/(p*q)) * Boys[0]
                + (0.03125*(32.0*(a.coordinate.x - b.coordinate.x)*(c.coordinate.x - d.coordinate.x)*(Rp[0] - a.coordinate.x)*(Rp[0]-Rq[0])*(p*p)*q - 32.0*(a.coordinate.x - b.coordinate.x)*(c.coordinate.x - d.coordinate.x)*(Rp[0]-Rq[0])*(Rq[0] - c.coordinate.x)*p*(q*q) + 16.0*(a.coordinate.x - b.coordinate.x)*(c.coordinate.x - d.coordinate.x)*p*q + 64.0*(a.coordinate.x - b.coordinate.x)*(Rp[0] - a.coordinate.x)*(Rp[0]-Rq[0])*(Rq[0] - c.coordinate.x)*(p*p)*q - 16.0*(a.coordinate.x - b.coordinate.x)*(Rp[0] - a.coordinate.x)*(p*p) - 32.0*(a.coordinate.x - b.coordinate.x)*(Rp[0]-Rq[0])*((Rq[0] - c.coordinate.x)*(Rq[0] - c.coordinate.x))*p*(q*q) - 16.0*(a.coordinate.x - b.coordinate.x)*(Rp[0]-Rq[0])*p*q + 32.0*(a.coordinate.x - b.coordinate.x)*(Rq[0] - c.coordinate.x)*p*q + 32.0*(c.coordinate.x - d.coordinate.x)*((Rp[0] - a.coordinate.x)*(Rp[0] - a.coordinate.x))*(Rp[0]-Rq[0])*(p*p)*q - 64.0*(c.coordinate.x - d.coordinate.x)*(Rp[0] - a.coordinate.x)*(Rp[0]-Rq[0])*(Rq[0] - c.coordinate.x)*p*(q*q) + 32.0*(c.coordinate.x - d.coordinate.x)*(Rp[0] - a.coordinate.x)*p*q + 16.0*(c.coordinate.x - d.coordinate.x)*(Rp[0]-Rq[0])*p*q - 16.0*(c.coordinate.x - d.coordinate.x)*(Rq[0] - c.coordinate.x)*(q*q) + 64.0*((Rp[0] - a.coordinate.x)*(Rp[0] - a.coordinate.x))*(Rp[0]-Rq[0])*(Rq[0] - c.coordinate.x)*(p*p)*q - 16.0*((Rp[0] - a.coordinate.x)*(Rp[0] - a.coordinate.x))*(p*p) - 64.0*(Rp[0] - a.coordinate.x)*(Rp[0]-Rq[0])*((Rq[0] - c.coordinate.x)*(Rq[0] - c.coordinate.x))*p*(q*q) - 32.0*(Rp[0] - a.coordinate.x)*(Rp[0]-Rq[0])*p*q + 64.0*(Rp[0] - a.coordinate.x)*(Rq[0] - c.coordinate.x)*p*q + 32.0*(Rp[0]-Rq[0])*(Rq[0] - c.coordinate.x)*p*q - 16.0*((Rq[0] - c.coordinate.x)*(Rq[0] - c.coordinate.x))*(q*q) - 8.0*p - 8.0*q)/(p*q*(p + q))) * Boys[1]
                + ((-16.0*(a.coordinate.x - b.coordinate.x)*(c.coordinate.x - d.coordinate.x)*((Rp[0]-Rq[0])*(Rp[0]-Rq[0]))*p*q + 16.0*(a.coordinate.x - b.coordinate.x)*(Rp[0] - a.coordinate.x)*((Rp[0]-Rq[0])*(Rp[0]-Rq[0]))*(p*p) - 32.0*(a.coordinate.x - b.coordinate.x)*((Rp[0]-Rq[0])*(Rp[0]-Rq[0]))*(Rq[0] - c.coordinate.x)*p*q + 24.0*(a.coordinate.x - b.coordinate.x)*(Rp[0]-Rq[0])*p - 32.0*(c.coordinate.x - d.coordinate.x)*(Rp[0] - a.coordinate.x)*((Rp[0]-Rq[0])*(Rp[0]-Rq[0]))*p*q + 16.0*(c.coordinate.x - d.coordinate.x)*((Rp[0]-Rq[0])*(Rp[0]-Rq[0]))*(Rq[0] - c.coordinate.x)*(q*q) - 24.0*(c.coordinate.x - d.coordinate.x)*(Rp[0]-Rq[0])*q + 16.0*((Rp[0] - a.coordinate.x)*(Rp[0] - a.coordinate.x))*((Rp[0]-Rq[0])*(Rp[0]-Rq[0]))*(p*p) - 64.0*(Rp[0] - a.coordinate.x)*((Rp[0]-Rq[0])*(Rp[0]-Rq[0]))*(Rq[0] - c.coordinate.x)*p*q + 48.0*(Rp[0] - a.coordinate.x)*(Rp[0]-Rq[0])*p + 16.0*((Rp[0]-Rq[0])*(Rp[0]-Rq[0]))*((Rq[0] - c.coordinate.x)*(Rq[0] - c.coordinate.x))*(q*q) + 8.0*((Rp[0]-Rq[0])*(Rp[0]-Rq[0]))*p + 8.0*((Rp[0]-Rq[0])*(Rp[0]-Rq[0]))*q - 48.0*(Rp[0]-Rq[0])*(Rq[0] - c.coordinate.x)*q + 12.0)/(16.0*(p*p) + 32.0*p*q + 16.0*(q*q))) * Boys[2]
                + (((Rp[0]-Rq[0])*(Rp[0]-Rq[0]))*p*q*(-2.0*(a.coordinate.x - b.coordinate.x)*(Rp[0]-Rq[0])*p + 2.0*(c.coordinate.x - d.coordinate.x)*(Rp[0]-Rq[0])*q - 4.0*(Rp[0] - a.coordinate.x)*(Rp[0]-Rq[0])*p + 4.0*(Rp[0]-Rq[0])*(Rq[0] - c.coordinate.x)*q - 6.0)/(2.0*(p*p*p) + 6.0*(p*p)*q + 6.0*p*(q*q) + 2.0*(q*q*q))) * Boys[3]
                + (((Rp[0]-Rq[0])*(Rp[0]-Rq[0])*(Rp[0]-Rq[0])*(Rp[0]-Rq[0]))*(p*p)*(q*q)/((p*p*p*p) + 4.0*(p*p*p)*q + 6.0*(p*p)*(q*q) + 4.0*p*(q*q*q) + (q*q*q*q))) * Boys[4]);
    // [xy|xy] = [01|01]
    upper_bound_factors[1] = coefAndNorm * (((Rp[0] - a.coordinate.x)*(Rq[0] - c.coordinate.x)*((a.coordinate.y - b.coordinate.y)*(c.coordinate.y - d.coordinate.y) + (a.coordinate.y - b.coordinate.y)*(Rq[1] - c.coordinate.y) + (c.coordinate.y - d.coordinate.y)*(Rp[1] - a.coordinate.y) + (Rp[1] - a.coordinate.y)*(Rq[1] - c.coordinate.y))) * Boys[0]
                + (0.5*(2.0*(Rp[0] - a.coordinate.x)*(Rp[0]-Rq[0])*(a.coordinate.y - b.coordinate.y)*(c.coordinate.y - d.coordinate.y)*p + 2.0*(Rp[0] - a.coordinate.x)*(Rp[0]-Rq[0])*(a.coordinate.y - b.coordinate.y)*(Rq[1] - c.coordinate.y)*p + 2.0*(Rp[0] - a.coordinate.x)*(Rp[0]-Rq[0])*(c.coordinate.y - d.coordinate.y)*(Rp[1] - a.coordinate.y)*p + 2.0*(Rp[0] - a.coordinate.x)*(Rp[0]-Rq[0])*(Rp[1] - a.coordinate.y)*(Rq[1] - c.coordinate.y)*p + 2.0*(Rp[0] - a.coordinate.x)*(Rq[0] - c.coordinate.x)*(a.coordinate.y - b.coordinate.y)*(Rp[1]-Rq[1])*p - 2.0*(Rp[0] - a.coordinate.x)*(Rq[0] - c.coordinate.x)*(c.coordinate.y - d.coordinate.y)*(Rp[1]-Rq[1])*q + 2.0*(Rp[0] - a.coordinate.x)*(Rq[0] - c.coordinate.x)*(Rp[1] - a.coordinate.y)*(Rp[1]-Rq[1])*p - 2.0*(Rp[0] - a.coordinate.x)*(Rq[0] - c.coordinate.x)*(Rp[1]-Rq[1])*(Rq[1] - c.coordinate.y)*q + (Rp[0] - a.coordinate.x)*(Rq[0] - c.coordinate.x) - 2.0*(Rp[0]-Rq[0])*(Rq[0] - c.coordinate.x)*(a.coordinate.y - b.coordinate.y)*(c.coordinate.y - d.coordinate.y)*q - 2.0*(Rp[0]-Rq[0])*(Rq[0] - c.coordinate.x)*(a.coordinate.y - b.coordinate.y)*(Rq[1] - c.coordinate.y)*q - 2.0*(Rp[0]-Rq[0])*(Rq[0] - c.coordinate.x)*(c.coordinate.y - d.coordinate.y)*(Rp[1] - a.coordinate.y)*q - 2.0*(Rp[0]-Rq[0])*(Rq[0] - c.coordinate.x)*(Rp[1] - a.coordinate.y)*(Rq[1] - c.coordinate.y)*q + (a.coordinate.y - b.coordinate.y)*(c.coordinate.y - d.coordinate.y) + (a.coordinate.y - b.coordinate.y)*(Rq[1] - c.coordinate.y) + (c.coordinate.y - d.coordinate.y)*(Rp[1] - a.coordinate.y) + (Rp[1] - a.coordinate.y)*(Rq[1] - c.coordinate.y))/(p + q)) * Boys[1]
                + ((16.0*(Rp[0] - a.coordinate.x)*(Rp[0]-Rq[0])*(a.coordinate.y - b.coordinate.y)*(Rp[1]-Rq[1])*(p*p) - 16.0*(Rp[0] - a.coordinate.x)*(Rp[0]-Rq[0])*(c.coordinate.y - d.coordinate.y)*(Rp[1]-Rq[1])*p*q + 16.0*(Rp[0] - a.coordinate.x)*(Rp[0]-Rq[0])*(Rp[1] - a.coordinate.y)*(Rp[1]-Rq[1])*(p*p) - 16.0*(Rp[0] - a.coordinate.x)*(Rp[0]-Rq[0])*(Rp[1]-Rq[1])*(Rq[1] - c.coordinate.y)*p*q + 8.0*(Rp[0] - a.coordinate.x)*(Rp[0]-Rq[0])*p - 16.0*(Rp[0] - a.coordinate.x)*(Rq[0] - c.coordinate.x)*((Rp[1]-Rq[1])*(Rp[1]-Rq[1]))*p*q - 16.0*((Rp[0]-Rq[0])*(Rp[0]-Rq[0]))*(a.coordinate.y - b.coordinate.y)*(c.coordinate.y - d.coordinate.y)*p*q - 16.0*((Rp[0]-Rq[0])*(Rp[0]-Rq[0]))*(a.coordinate.y - b.coordinate.y)*(Rq[1] - c.coordinate.y)*p*q - 16.0*((Rp[0]-Rq[0])*(Rp[0]-Rq[0]))*(c.coordinate.y - d.coordinate.y)*(Rp[1] - a.coordinate.y)*p*q - 16.0*((Rp[0]-Rq[0])*(Rp[0]-Rq[0]))*(Rp[1] - a.coordinate.y)*(Rq[1] - c.coordinate.y)*p*q - 16.0*(Rp[0]-Rq[0])*(Rq[0] - c.coordinate.x)*(a.coordinate.y - b.coordinate.y)*(Rp[1]-Rq[1])*p*q + 16.0*(Rp[0]-Rq[0])*(Rq[0] - c.coordinate.x)*(c.coordinate.y - d.coordinate.y)*(Rp[1]-Rq[1])*(q*q) - 16.0*(Rp[0]-Rq[0])*(Rq[0] - c.coordinate.x)*(Rp[1] - a.coordinate.y)*(Rp[1]-Rq[1])*p*q + 16.0*(Rp[0]-Rq[0])*(Rq[0] - c.coordinate.x)*(Rp[1]-Rq[1])*(Rq[1] - c.coordinate.y)*(q*q) - 8.0*(Rp[0]-Rq[0])*(Rq[0] - c.coordinate.x)*q + 8.0*(a.coordinate.y - b.coordinate.y)*(Rp[1]-Rq[1])*p - 8.0*(c.coordinate.y - d.coordinate.y)*(Rp[1]-Rq[1])*q + 8.0*(Rp[1] - a.coordinate.y)*(Rp[1]-Rq[1])*p - 8.0*(Rp[1]-Rq[1])*(Rq[1] - c.coordinate.y)*q + 4.0)/(16.0*(p*p) + 32.0*p*q + 16.0*(q*q))) * Boys[2]
                + (p*q*(-2.0*(Rp[0] - a.coordinate.x)*(Rp[0]-Rq[0])*((Rp[1]-Rq[1])*(Rp[1]-Rq[1]))*p - 2.0*((Rp[0]-Rq[0])*(Rp[0]-Rq[0]))*(a.coordinate.y - b.coordinate.y)*(Rp[1]-Rq[1])*p + 2.0*((Rp[0]-Rq[0])*(Rp[0]-Rq[0]))*(c.coordinate.y - d.coordinate.y)*(Rp[1]-Rq[1])*q - 2.0*((Rp[0]-Rq[0])*(Rp[0]-Rq[0]))*(Rp[1] - a.coordinate.y)*(Rp[1]-Rq[1])*p + 2.0*((Rp[0]-Rq[0])*(Rp[0]-Rq[0]))*(Rp[1]-Rq[1])*(Rq[1] - c.coordinate.y)*q - ((Rp[0]-Rq[0])*(Rp[0]-Rq[0])) + 2.0*(Rp[0]-Rq[0])*(Rq[0] - c.coordinate.x)*((Rp[1]-Rq[1])*(Rp[1]-Rq[1]))*q - ((Rp[1]-Rq[1])*(Rp[1]-Rq[1])))/(2.0*(p*p*p) + 6.0*(p*p)*q + 6.0*p*(q*q) + 2.0*(q*q*q))) * Boys[3]
                + (((Rp[0]-Rq[0])*(Rp[0]-Rq[0]))*((Rp[1]-Rq[1])*(Rp[1]-Rq[1]))*(p*p)*(q*q)/((p*p*p*p) + 4.0*(p*p*p)*q + 6.0*(p*p)*(q*q) + 4.0*p*(q*q*q) + (q*q*q*q))) * Boys[4]);
    // [xz|xz] = [02|02]
    upper_bound_factors[2] = coefAndNorm * (((Rp[0] - a.coordinate.x)*(Rq[0] - c.coordinate.x)*((a.coordinate.z - b.coordinate.z)*(c.coordinate.z - d.coordinate.z) + (a.coordinate.z - b.coordinate.z)*(Rq[2] - c.coordinate.z) + (c.coordinate.z - d.coordinate.z)*(Rp[2] - a.coordinate.z) + (Rp[2] - a.coordinate.z)*(Rq[2] - c.coordinate.z))) * Boys[0]
                + (0.5*(2.0*(Rp[0] - a.coordinate.x)*(Rp[0]-Rq[0])*(a.coordinate.z - b.coordinate.z)*(c.coordinate.z - d.coordinate.z)*p + 2.0*(Rp[0] - a.coordinate.x)*(Rp[0]-Rq[0])*(a.coordinate.z - b.coordinate.z)*(Rq[2] - c.coordinate.z)*p + 2.0*(Rp[0] - a.coordinate.x)*(Rp[0]-Rq[0])*(c.coordinate.z - d.coordinate.z)*(Rp[2] - a.coordinate.z)*p + 2.0*(Rp[0] - a.coordinate.x)*(Rp[0]-Rq[0])*(Rp[2] - a.coordinate.z)*(Rq[2] - c.coordinate.z)*p + 2.0*(Rp[0] - a.coordinate.x)*(Rq[0] - c.coordinate.x)*(a.coordinate.z - b.coordinate.z)*(Rp[2]-Rq[2])*p - 2.0*(Rp[0] - a.coordinate.x)*(Rq[0] - c.coordinate.x)*(c.coordinate.z - d.coordinate.z)*(Rp[2]-Rq[2])*q + 2.0*(Rp[0] - a.coordinate.x)*(Rq[0] - c.coordinate.x)*(Rp[2] - a.coordinate.z)*(Rp[2]-Rq[2])*p - 2.0*(Rp[0] - a.coordinate.x)*(Rq[0] - c.coordinate.x)*(Rp[2]-Rq[2])*(Rq[2] - c.coordinate.z)*q + (Rp[0] - a.coordinate.x)*(Rq[0] - c.coordinate.x) - 2.0*(Rp[0]-Rq[0])*(Rq[0] - c.coordinate.x)*(a.coordinate.z - b.coordinate.z)*(c.coordinate.z - d.coordinate.z)*q - 2.0*(Rp[0]-Rq[0])*(Rq[0] - c.coordinate.x)*(a.coordinate.z - b.coordinate.z)*(Rq[2] - c.coordinate.z)*q - 2.0*(Rp[0]-Rq[0])*(Rq[0] - c.coordinate.x)*(c.coordinate.z - d.coordinate.z)*(Rp[2] - a.coordinate.z)*q - 2.0*(Rp[0]-Rq[0])*(Rq[0] - c.coordinate.x)*(Rp[2] - a.coordinate.z)*(Rq[2] - c.coordinate.z)*q + (a.coordinate.z - b.coordinate.z)*(c.coordinate.z - d.coordinate.z) + (a.coordinate.z - b.coordinate.z)*(Rq[2] - c.coordinate.z) + (c.coordinate.z - d.coordinate.z)*(Rp[2] - a.coordinate.z) + (Rp[2] - a.coordinate.z)*(Rq[2] - c.coordinate.z))/(p + q)) * Boys[1]
                + ((16.0*(Rp[0] - a.coordinate.x)*(Rp[0]-Rq[0])*(a.coordinate.z - b.coordinate.z)*(Rp[2]-Rq[2])*(p*p) - 16.0*(Rp[0] - a.coordinate.x)*(Rp[0]-Rq[0])*(c.coordinate.z - d.coordinate.z)*(Rp[2]-Rq[2])*p*q + 16.0*(Rp[0] - a.coordinate.x)*(Rp[0]-Rq[0])*(Rp[2] - a.coordinate.z)*(Rp[2]-Rq[2])*(p*p) - 16.0*(Rp[0] - a.coordinate.x)*(Rp[0]-Rq[0])*(Rp[2]-Rq[2])*(Rq[2] - c.coordinate.z)*p*q + 8.0*(Rp[0] - a.coordinate.x)*(Rp[0]-Rq[0])*p - 16.0*(Rp[0] - a.coordinate.x)*(Rq[0] - c.coordinate.x)*((Rp[2]-Rq[2])*(Rp[2]-Rq[2]))*p*q - 16.0*((Rp[0]-Rq[0])*(Rp[0]-Rq[0]))*(a.coordinate.z - b.coordinate.z)*(c.coordinate.z - d.coordinate.z)*p*q - 16.0*((Rp[0]-Rq[0])*(Rp[0]-Rq[0]))*(a.coordinate.z - b.coordinate.z)*(Rq[2] - c.coordinate.z)*p*q - 16.0*((Rp[0]-Rq[0])*(Rp[0]-Rq[0]))*(c.coordinate.z - d.coordinate.z)*(Rp[2] - a.coordinate.z)*p*q - 16.0*((Rp[0]-Rq[0])*(Rp[0]-Rq[0]))*(Rp[2] - a.coordinate.z)*(Rq[2] - c.coordinate.z)*p*q - 16.0*(Rp[0]-Rq[0])*(Rq[0] - c.coordinate.x)*(a.coordinate.z - b.coordinate.z)*(Rp[2]-Rq[2])*p*q + 16.0*(Rp[0]-Rq[0])*(Rq[0] - c.coordinate.x)*(c.coordinate.z - d.coordinate.z)*(Rp[2]-Rq[2])*(q*q) - 16.0*(Rp[0]-Rq[0])*(Rq[0] - c.coordinate.x)*(Rp[2] - a.coordinate.z)*(Rp[2]-Rq[2])*p*q + 16.0*(Rp[0]-Rq[0])*(Rq[0] - c.coordinate.x)*(Rp[2]-Rq[2])*(Rq[2] - c.coordinate.z)*(q*q) - 8.0*(Rp[0]-Rq[0])*(Rq[0] - c.coordinate.x)*q + 8.0*(a.coordinate.z - b.coordinate.z)*(Rp[2]-Rq[2])*p - 8.0*(c.coordinate.z - d.coordinate.z)*(Rp[2]-Rq[2])*q + 8.0*(Rp[2] - a.coordinate.z)*(Rp[2]-Rq[2])*p - 8.0*(Rp[2]-Rq[2])*(Rq[2] - c.coordinate.z)*q + 4.0)/(16.0*(p*p) + 32.0*p*q + 16.0*(q*q))) * Boys[2]
                + (p*q*(-2.0*(Rp[0] - a.coordinate.x)*(Rp[0]-Rq[0])*((Rp[2]-Rq[2])*(Rp[2]-Rq[2]))*p - 2.0*((Rp[0]-Rq[0])*(Rp[0]-Rq[0]))*(a.coordinate.z - b.coordinate.z)*(Rp[2]-Rq[2])*p + 2.0*((Rp[0]-Rq[0])*(Rp[0]-Rq[0]))*(c.coordinate.z - d.coordinate.z)*(Rp[2]-Rq[2])*q - 2.0*((Rp[0]-Rq[0])*(Rp[0]-Rq[0]))*(Rp[2] - a.coordinate.z)*(Rp[2]-Rq[2])*p + 2.0*((Rp[0]-Rq[0])*(Rp[0]-Rq[0]))*(Rp[2]-Rq[2])*(Rq[2] - c.coordinate.z)*q - ((Rp[0]-Rq[0])*(Rp[0]-Rq[0])) + 2.0*(Rp[0]-Rq[0])*(Rq[0] - c.coordinate.x)*((Rp[2]-Rq[2])*(Rp[2]-Rq[2]))*q - ((Rp[2]-Rq[2])*(Rp[2]-Rq[2])))/(2.0*(p*p*p) + 6.0*(p*p)*q + 6.0*p*(q*q) + 2.0*(q*q*q))) * Boys[3]
                + (((Rp[0]-Rq[0])*(Rp[0]-Rq[0]))*((Rp[2]-Rq[2])*(Rp[2]-Rq[2]))*(p*p)*(q*q)/((p*p*p*p) + 4.0*(p*p*p)*q + 6.0*(p*p)*(q*q) + 4.0*p*(q*q*q) + (q*q*q*q))) * Boys[4]);
    // [yx|yx] = [10|10]
    upper_bound_factors[3] = coefAndNorm * (((Rp[1] - a.coordinate.y)*(Rq[1] - c.coordinate.y)*((a.coordinate.x - b.coordinate.x)*(c.coordinate.x - d.coordinate.x) + (a.coordinate.x - b.coordinate.x)*(Rq[0] - c.coordinate.x) + (c.coordinate.x - d.coordinate.x)*(Rp[0] - a.coordinate.x) + (Rp[0] - a.coordinate.x)*(Rq[0] - c.coordinate.x))) * Boys[0]
                + (0.5*(2.0*(a.coordinate.x - b.coordinate.x)*(c.coordinate.x - d.coordinate.x)*(Rp[1] - a.coordinate.y)*(Rp[1]-Rq[1])*p - 2.0*(a.coordinate.x - b.coordinate.x)*(c.coordinate.x - d.coordinate.x)*(Rp[1]-Rq[1])*(Rq[1] - c.coordinate.y)*q + (a.coordinate.x - b.coordinate.x)*(c.coordinate.x - d.coordinate.x) + 2.0*(a.coordinate.x - b.coordinate.x)*(Rp[0]-Rq[0])*(Rp[1] - a.coordinate.y)*(Rq[1] - c.coordinate.y)*p + 2.0*(a.coordinate.x - b.coordinate.x)*(Rq[0] - c.coordinate.x)*(Rp[1] - a.coordinate.y)*(Rp[1]-Rq[1])*p - 2.0*(a.coordinate.x - b.coordinate.x)*(Rq[0] - c.coordinate.x)*(Rp[1]-Rq[1])*(Rq[1] - c.coordinate.y)*q + (a.coordinate.x - b.coordinate.x)*(Rq[0] - c.coordinate.x) + 2.0*(c.coordinate.x - d.coordinate.x)*(Rp[0] - a.coordinate.x)*(Rp[1] - a.coordinate.y)*(Rp[1]-Rq[1])*p - 2.0*(c.coordinate.x - d.coordinate.x)*(Rp[0] - a.coordinate.x)*(Rp[1]-Rq[1])*(Rq[1] - c.coordinate.y)*q + (c.coordinate.x - d.coordinate.x)*(Rp[0] - a.coordinate.x) - 2.0*(c.coordinate.x - d.coordinate.x)*(Rp[0]-Rq[0])*(Rp[1] - a.coordinate.y)*(Rq[1] - c.coordinate.y)*q + 2.0*(Rp[0] - a.coordinate.x)*(Rp[0]-Rq[0])*(Rp[1] - a.coordinate.y)*(Rq[1] - c.coordinate.y)*p + 2.0*(Rp[0] - a.coordinate.x)*(Rq[0] - c.coordinate.x)*(Rp[1] - a.coordinate.y)*(Rp[1]-Rq[1])*p - 2.0*(Rp[0] - a.coordinate.x)*(Rq[0] - c.coordinate.x)*(Rp[1]-Rq[1])*(Rq[1] - c.coordinate.y)*q + (Rp[0] - a.coordinate.x)*(Rq[0] - c.coordinate.x) - 2.0*(Rp[0]-Rq[0])*(Rq[0] - c.coordinate.x)*(Rp[1] - a.coordinate.y)*(Rq[1] - c.coordinate.y)*q + (Rp[1] - a.coordinate.y)*(Rq[1] - c.coordinate.y))/(p + q)) * Boys[1]
                + ((-16.0*(a.coordinate.x - b.coordinate.x)*(c.coordinate.x - d.coordinate.x)*((Rp[1]-Rq[1])*(Rp[1]-Rq[1]))*p*q + 16.0*(a.coordinate.x - b.coordinate.x)*(Rp[0]-Rq[0])*(Rp[1] - a.coordinate.y)*(Rp[1]-Rq[1])*(p*p) - 16.0*(a.coordinate.x - b.coordinate.x)*(Rp[0]-Rq[0])*(Rp[1]-Rq[1])*(Rq[1] - c.coordinate.y)*p*q + 8.0*(a.coordinate.x - b.coordinate.x)*(Rp[0]-Rq[0])*p - 16.0*(a.coordinate.x - b.coordinate.x)*(Rq[0] - c.coordinate.x)*((Rp[1]-Rq[1])*(Rp[1]-Rq[1]))*p*q - 16.0*(c.coordinate.x - d.coordinate.x)*(Rp[0] - a.coordinate.x)*((Rp[1]-Rq[1])*(Rp[1]-Rq[1]))*p*q - 16.0*(c.coordinate.x - d.coordinate.x)*(Rp[0]-Rq[0])*(Rp[1] - a.coordinate.y)*(Rp[1]-Rq[1])*p*q + 16.0*(c.coordinate.x - d.coordinate.x)*(Rp[0]-Rq[0])*(Rp[1]-Rq[1])*(Rq[1] - c.coordinate.y)*(q*q) - 8.0*(c.coordinate.x - d.coordinate.x)*(Rp[0]-Rq[0])*q + 16.0*(Rp[0] - a.coordinate.x)*(Rp[0]-Rq[0])*(Rp[1] - a.coordinate.y)*(Rp[1]-Rq[1])*(p*p) - 16.0*(Rp[0] - a.coordinate.x)*(Rp[0]-Rq[0])*(Rp[1]-Rq[1])*(Rq[1] - c.coordinate.y)*p*q + 8.0*(Rp[0] - a.coordinate.x)*(Rp[0]-Rq[0])*p - 16.0*(Rp[0] - a.coordinate.x)*(Rq[0] - c.coordinate.x)*((Rp[1]-Rq[1])*(Rp[1]-Rq[1]))*p*q - 16.0*((Rp[0]-Rq[0])*(Rp[0]-Rq[0]))*(Rp[1] - a.coordinate.y)*(Rq[1] - c.coordinate.y)*p*q - 16.0*(Rp[0]-Rq[0])*(Rq[0] - c.coordinate.x)*(Rp[1] - a.coordinate.y)*(Rp[1]-Rq[1])*p*q + 16.0*(Rp[0]-Rq[0])*(Rq[0] - c.coordinate.x)*(Rp[1]-Rq[1])*(Rq[1] - c.coordinate.y)*(q*q) - 8.0*(Rp[0]-Rq[0])*(Rq[0] - c.coordinate.x)*q + 8.0*(Rp[1] - a.coordinate.y)*(Rp[1]-Rq[1])*p - 8.0*(Rp[1]-Rq[1])*(Rq[1] - c.coordinate.y)*q + 4.0)/(16.0*(p*p) + 32.0*p*q + 16.0*(q*q))) * Boys[2]
                + (p*q*(-2.0*(a.coordinate.x - b.coordinate.x)*(Rp[0]-Rq[0])*((Rp[1]-Rq[1])*(Rp[1]-Rq[1]))*p + 2.0*(c.coordinate.x - d.coordinate.x)*(Rp[0]-Rq[0])*((Rp[1]-Rq[1])*(Rp[1]-Rq[1]))*q - 2.0*(Rp[0] - a.coordinate.x)*(Rp[0]-Rq[0])*((Rp[1]-Rq[1])*(Rp[1]-Rq[1]))*p - 2.0*((Rp[0]-Rq[0])*(Rp[0]-Rq[0]))*(Rp[1] - a.coordinate.y)*(Rp[1]-Rq[1])*p + 2.0*((Rp[0]-Rq[0])*(Rp[0]-Rq[0]))*(Rp[1]-Rq[1])*(Rq[1] - c.coordinate.y)*q - ((Rp[0]-Rq[0])*(Rp[0]-Rq[0])) + 2.0*(Rp[0]-Rq[0])*(Rq[0] - c.coordinate.x)*((Rp[1]-Rq[1])*(Rp[1]-Rq[1]))*q - ((Rp[1]-Rq[1])*(Rp[1]-Rq[1])))/(2.0*(p*p*p) + 6.0*(p*p)*q + 6.0*p*(q*q) + 2.0*(q*q*q))) * Boys[3]
                + (((Rp[0]-Rq[0])*(Rp[0]-Rq[0]))*((Rp[1]-Rq[1])*(Rp[1]-Rq[1]))*(p*p)*(q*q)/((p*p*p*p) + 4.0*(p*p*p)*q + 6.0*(p*p)*(q*q) + 4.0*p*(q*q*q) + (q*q*q*q))) * Boys[4]);
    // [yy|yy] = [11|11]
    upper_bound_factors[4] = coefAndNorm * (((a.coordinate.y - b.coordinate.y)*(c.coordinate.y - d.coordinate.y)*(Rp[1] - a.coordinate.y)*(Rq[1] - c.coordinate.y) + (a.coordinate.y - b.coordinate.y)*(Rp[1] - a.coordinate.y)*((Rq[1] - c.coordinate.y)*(Rq[1] - c.coordinate.y)) + 0.5*(a.coordinate.y - b.coordinate.y)*(Rp[1] - a.coordinate.y)/q + (c.coordinate.y - d.coordinate.y)*((Rp[1] - a.coordinate.y)*(Rp[1] - a.coordinate.y))*(Rq[1] - c.coordinate.y) + 0.5*(c.coordinate.y - d.coordinate.y)*(Rq[1] - c.coordinate.y)/p + ((Rp[1] - a.coordinate.y)*(Rp[1] - a.coordinate.y))*((Rq[1] - c.coordinate.y)*(Rq[1] - c.coordinate.y)) + 0.5*((Rp[1] - a.coordinate.y)*(Rp[1] - a.coordinate.y))/q + 0.5*((Rq[1] - c.coordinate.y)*(Rq[1] - c.coordinate.y))/p + 0.25/(p*q)) * Boys[0]
                + (0.03125*(32.0*(a.coordinate.y - b.coordinate.y)*(c.coordinate.y - d.coordinate.y)*(Rp[1] - a.coordinate.y)*(Rp[1]-Rq[1])*(p*p)*q - 32.0*(a.coordinate.y - b.coordinate.y)*(c.coordinate.y - d.coordinate.y)*(Rp[1]-Rq[1])*(Rq[1] - c.coordinate.y)*p*(q*q) + 16.0*(a.coordinate.y - b.coordinate.y)*(c.coordinate.y - d.coordinate.y)*p*q + 64.0*(a.coordinate.y - b.coordinate.y)*(Rp[1] - a.coordinate.y)*(Rp[1]-Rq[1])*(Rq[1] - c.coordinate.y)*(p*p)*q - 16.0*(a.coordinate.y - b.coordinate.y)*(Rp[1] - a.coordinate.y)*(p*p) - 32.0*(a.coordinate.y - b.coordinate.y)*(Rp[1]-Rq[1])*((Rq[1] - c.coordinate.y)*(Rq[1] - c.coordinate.y))*p*(q*q) - 16.0*(a.coordinate.y - b.coordinate.y)*(Rp[1]-Rq[1])*p*q + 32.0*(a.coordinate.y - b.coordinate.y)*(Rq[1] - c.coordinate.y)*p*q + 32.0*(c.coordinate.y - d.coordinate.y)*((Rp[1] - a.coordinate.y)*(Rp[1] - a.coordinate.y))*(Rp[1]-Rq[1])*(p*p)*q - 64.0*(c.coordinate.y - d.coordinate.y)*(Rp[1] - a.coordinate.y)*(Rp[1]-Rq[1])*(Rq[1] - c.coordinate.y)*p*(q*q) + 32.0*(c.coordinate.y - d.coordinate.y)*(Rp[1] - a.coordinate.y)*p*q + 16.0*(c.coordinate.y - d.coordinate.y)*(Rp[1]-Rq[1])*p*q - 16.0*(c.coordinate.y - d.coordinate.y)*(Rq[1] - c.coordinate.y)*(q*q) + 64.0*((Rp[1] - a.coordinate.y)*(Rp[1] - a.coordinate.y))*(Rp[1]-Rq[1])*(Rq[1] - c.coordinate.y)*(p*p)*q - 16.0*((Rp[1] - a.coordinate.y)*(Rp[1] - a.coordinate.y))*(p*p) - 64.0*(Rp[1] - a.coordinate.y)*(Rp[1]-Rq[1])*((Rq[1] - c.coordinate.y)*(Rq[1] - c.coordinate.y))*p*(q*q) - 32.0*(Rp[1] - a.coordinate.y)*(Rp[1]-Rq[1])*p*q + 64.0*(Rp[1] - a.coordinate.y)*(Rq[1] - c.coordinate.y)*p*q + 32.0*(Rp[1]-Rq[1])*(Rq[1] - c.coordinate.y)*p*q - 16.0*((Rq[1] - c.coordinate.y)*(Rq[1] - c.coordinate.y))*(q*q) - 8.0*p - 8.0*q)/(p*q*(p + q))) * Boys[1]
                + ((-16.0*(a.coordinate.y - b.coordinate.y)*(c.coordinate.y - d.coordinate.y)*((Rp[1]-Rq[1])*(Rp[1]-Rq[1]))*p*q + 16.0*(a.coordinate.y - b.coordinate.y)*(Rp[1] - a.coordinate.y)*((Rp[1]-Rq[1])*(Rp[1]-Rq[1]))*(p*p) - 32.0*(a.coordinate.y - b.coordinate.y)*((Rp[1]-Rq[1])*(Rp[1]-Rq[1]))*(Rq[1] - c.coordinate.y)*p*q + 24.0*(a.coordinate.y - b.coordinate.y)*(Rp[1]-Rq[1])*p - 32.0*(c.coordinate.y - d.coordinate.y)*(Rp[1] - a.coordinate.y)*((Rp[1]-Rq[1])*(Rp[1]-Rq[1]))*p*q + 16.0*(c.coordinate.y - d.coordinate.y)*((Rp[1]-Rq[1])*(Rp[1]-Rq[1]))*(Rq[1] - c.coordinate.y)*(q*q) - 24.0*(c.coordinate.y - d.coordinate.y)*(Rp[1]-Rq[1])*q + 16.0*((Rp[1] - a.coordinate.y)*(Rp[1] - a.coordinate.y))*((Rp[1]-Rq[1])*(Rp[1]-Rq[1]))*(p*p) - 64.0*(Rp[1] - a.coordinate.y)*((Rp[1]-Rq[1])*(Rp[1]-Rq[1]))*(Rq[1] - c.coordinate.y)*p*q + 48.0*(Rp[1] - a.coordinate.y)*(Rp[1]-Rq[1])*p + 16.0*((Rp[1]-Rq[1])*(Rp[1]-Rq[1]))*((Rq[1] - c.coordinate.y)*(Rq[1] - c.coordinate.y))*(q*q) + 8.0*((Rp[1]-Rq[1])*(Rp[1]-Rq[1]))*p + 8.0*((Rp[1]-Rq[1])*(Rp[1]-Rq[1]))*q - 48.0*(Rp[1]-Rq[1])*(Rq[1] - c.coordinate.y)*q + 12.0)/(16.0*(p*p) + 32.0*p*q + 16.0*(q*q))) * Boys[2]
                + (((Rp[1]-Rq[1])*(Rp[1]-Rq[1]))*p*q*(-2.0*(a.coordinate.y - b.coordinate.y)*(Rp[1]-Rq[1])*p + 2.0*(c.coordinate.y - d.coordinate.y)*(Rp[1]-Rq[1])*q - 4.0*(Rp[1] - a.coordinate.y)*(Rp[1]-Rq[1])*p + 4.0*(Rp[1]-Rq[1])*(Rq[1] - c.coordinate.y)*q - 6.0)/(2.0*(p*p*p) + 6.0*(p*p)*q + 6.0*p*(q*q) + 2.0*(q*q*q))) * Boys[3]
                + (((Rp[1]-Rq[1])*(Rp[1]-Rq[1])*(Rp[1]-Rq[1])*(Rp[1]-Rq[1]))*(p*p)*(q*q)/((p*p*p*p) + 4.0*(p*p*p)*q + 6.0*(p*p)*(q*q) + 4.0*p*(q*q*q) + (q*q*q*q))) * Boys[4]);
    // [yz|yz] = [12|12]
    upper_bound_factors[5] = coefAndNorm * (((Rp[1] - a.coordinate.y)*(Rq[1] - c.coordinate.y)*((a.coordinate.z - b.coordinate.z)*(c.coordinate.z - d.coordinate.z) + (a.coordinate.z - b.coordinate.z)*(Rq[2] - c.coordinate.z) + (c.coordinate.z - d.coordinate.z)*(Rp[2] - a.coordinate.z) + (Rp[2] - a.coordinate.z)*(Rq[2] - c.coordinate.z))) * Boys[0]
                + (0.5*(2.0*(Rp[1] - a.coordinate.y)*(Rp[1]-Rq[1])*(a.coordinate.z - b.coordinate.z)*(c.coordinate.z - d.coordinate.z)*p + 2.0*(Rp[1] - a.coordinate.y)*(Rp[1]-Rq[1])*(a.coordinate.z - b.coordinate.z)*(Rq[2] - c.coordinate.z)*p + 2.0*(Rp[1] - a.coordinate.y)*(Rp[1]-Rq[1])*(c.coordinate.z - d.coordinate.z)*(Rp[2] - a.coordinate.z)*p + 2.0*(Rp[1] - a.coordinate.y)*(Rp[1]-Rq[1])*(Rp[2] - a.coordinate.z)*(Rq[2] - c.coordinate.z)*p + 2.0*(Rp[1] - a.coordinate.y)*(Rq[1] - c.coordinate.y)*(a.coordinate.z - b.coordinate.z)*(Rp[2]-Rq[2])*p - 2.0*(Rp[1] - a.coordinate.y)*(Rq[1] - c.coordinate.y)*(c.coordinate.z - d.coordinate.z)*(Rp[2]-Rq[2])*q + 2.0*(Rp[1] - a.coordinate.y)*(Rq[1] - c.coordinate.y)*(Rp[2] - a.coordinate.z)*(Rp[2]-Rq[2])*p - 2.0*(Rp[1] - a.coordinate.y)*(Rq[1] - c.coordinate.y)*(Rp[2]-Rq[2])*(Rq[2] - c.coordinate.z)*q + (Rp[1] - a.coordinate.y)*(Rq[1] - c.coordinate.y) - 2.0*(Rp[1]-Rq[1])*(Rq[1] - c.coordinate.y)*(a.coordinate.z - b.coordinate.z)*(c.coordinate.z - d.coordinate.z)*q - 2.0*(Rp[1]-Rq[1])*(Rq[1] - c.coordinate.y)*(a.coordinate.z - b.coordinate.z)*(Rq[2] - c.coordinate.z)*q - 2.0*(Rp[1]-Rq[1])*(Rq[1] - c.coordinate.y)*(c.coordinate.z - d.coordinate.z)*(Rp[2] - a.coordinate.z)*q - 2.0*(Rp[1]-Rq[1])*(Rq[1] - c.coordinate.y)*(Rp[2] - a.coordinate.z)*(Rq[2] - c.coordinate.z)*q + (a.coordinate.z - b.coordinate.z)*(c.coordinate.z - d.coordinate.z) + (a.coordinate.z - b.coordinate.z)*(Rq[2] - c.coordinate.z) + (c.coordinate.z - d.coordinate.z)*(Rp[2] - a.coordinate.z) + (Rp[2] - a.coordinate.z)*(Rq[2] - c.coordinate.z))/(p + q)) * Boys[1]
                + ((16.0*(Rp[1] - a.coordinate.y)*(Rp[1]-Rq[1])*(a.coordinate.z - b.coordinate.z)*(Rp[2]-Rq[2])*(p*p) - 16.0*(Rp[1] - a.coordinate.y)*(Rp[1]-Rq[1])*(c.coordinate.z - d.coordinate.z)*(Rp[2]-Rq[2])*p*q + 16.0*(Rp[1] - a.coordinate.y)*(Rp[1]-Rq[1])*(Rp[2] - a.coordinate.z)*(Rp[2]-Rq[2])*(p*p) - 16.0*(Rp[1] - a.coordinate.y)*(Rp[1]-Rq[1])*(Rp[2]-Rq[2])*(Rq[2] - c.coordinate.z)*p*q + 8.0*(Rp[1] - a.coordinate.y)*(Rp[1]-Rq[1])*p - 16.0*(Rp[1] - a.coordinate.y)*(Rq[1] - c.coordinate.y)*((Rp[2]-Rq[2])*(Rp[2]-Rq[2]))*p*q - 16.0*((Rp[1]-Rq[1])*(Rp[1]-Rq[1]))*(a.coordinate.z - b.coordinate.z)*(c.coordinate.z - d.coordinate.z)*p*q - 16.0*((Rp[1]-Rq[1])*(Rp[1]-Rq[1]))*(a.coordinate.z - b.coordinate.z)*(Rq[2] - c.coordinate.z)*p*q - 16.0*((Rp[1]-Rq[1])*(Rp[1]-Rq[1]))*(c.coordinate.z - d.coordinate.z)*(Rp[2] - a.coordinate.z)*p*q - 16.0*((Rp[1]-Rq[1])*(Rp[1]-Rq[1]))*(Rp[2] - a.coordinate.z)*(Rq[2] - c.coordinate.z)*p*q - 16.0*(Rp[1]-Rq[1])*(Rq[1] - c.coordinate.y)*(a.coordinate.z - b.coordinate.z)*(Rp[2]-Rq[2])*p*q + 16.0*(Rp[1]-Rq[1])*(Rq[1] - c.coordinate.y)*(c.coordinate.z - d.coordinate.z)*(Rp[2]-Rq[2])*(q*q) - 16.0*(Rp[1]-Rq[1])*(Rq[1] - c.coordinate.y)*(Rp[2] - a.coordinate.z)*(Rp[2]-Rq[2])*p*q + 16.0*(Rp[1]-Rq[1])*(Rq[1] - c.coordinate.y)*(Rp[2]-Rq[2])*(Rq[2] - c.coordinate.z)*(q*q) - 8.0*(Rp[1]-Rq[1])*(Rq[1] - c.coordinate.y)*q + 8.0*(a.coordinate.z - b.coordinate.z)*(Rp[2]-Rq[2])*p - 8.0*(c.coordinate.z - d.coordinate.z)*(Rp[2]-Rq[2])*q + 8.0*(Rp[2] - a.coordinate.z)*(Rp[2]-Rq[2])*p - 8.0*(Rp[2]-Rq[2])*(Rq[2] - c.coordinate.z)*q + 4.0)/(16.0*(p*p) + 32.0*p*q + 16.0*(q*q))) * Boys[2]
                + (p*q*(-2.0*(Rp[1] - a.coordinate.y)*(Rp[1]-Rq[1])*((Rp[2]-Rq[2])*(Rp[2]-Rq[2]))*p - 2.0*((Rp[1]-Rq[1])*(Rp[1]-Rq[1]))*(a.coordinate.z - b.coordinate.z)*(Rp[2]-Rq[2])*p + 2.0*((Rp[1]-Rq[1])*(Rp[1]-Rq[1]))*(c.coordinate.z - d.coordinate.z)*(Rp[2]-Rq[2])*q - 2.0*((Rp[1]-Rq[1])*(Rp[1]-Rq[1]))*(Rp[2] - a.coordinate.z)*(Rp[2]-Rq[2])*p + 2.0*((Rp[1]-Rq[1])*(Rp[1]-Rq[1]))*(Rp[2]-Rq[2])*(Rq[2] - c.coordinate.z)*q - ((Rp[1]-Rq[1])*(Rp[1]-Rq[1])) + 2.0*(Rp[1]-Rq[1])*(Rq[1] - c.coordinate.y)*((Rp[2]-Rq[2])*(Rp[2]-Rq[2]))*q - ((Rp[2]-Rq[2])*(Rp[2]-Rq[2])))/(2.0*(p*p*p) + 6.0*(p*p)*q + 6.0*p*(q*q) + 2.0*(q*q*q))) * Boys[3]
                + (((Rp[1]-Rq[1])*(Rp[1]-Rq[1]))*((Rp[2]-Rq[2])*(Rp[2]-Rq[2]))*(p*p)*(q*q)/((p*p*p*p) + 4.0*(p*p*p)*q + 6.0*(p*p)*(q*q) + 4.0*p*(q*q*q) + (q*q*q*q))) * Boys[4]);
    // [zx|zx] = [20|20]
    upper_bound_factors[6] = coefAndNorm * (((Rp[2] - a.coordinate.z)*(Rq[2] - c.coordinate.z)*((a.coordinate.x - b.coordinate.x)*(c.coordinate.x - d.coordinate.x) + (a.coordinate.x - b.coordinate.x)*(Rq[0] - c.coordinate.x) + (c.coordinate.x - d.coordinate.x)*(Rp[0] - a.coordinate.x) + (Rp[0] - a.coordinate.x)*(Rq[0] - c.coordinate.x))) * Boys[0]
                + (0.5*(2.0*(a.coordinate.x - b.coordinate.x)*(c.coordinate.x - d.coordinate.x)*(Rp[2] - a.coordinate.z)*(Rp[2]-Rq[2])*p - 2.0*(a.coordinate.x - b.coordinate.x)*(c.coordinate.x - d.coordinate.x)*(Rp[2]-Rq[2])*(Rq[2] - c.coordinate.z)*q + (a.coordinate.x - b.coordinate.x)*(c.coordinate.x - d.coordinate.x) + 2.0*(a.coordinate.x - b.coordinate.x)*(Rp[0]-Rq[0])*(Rp[2] - a.coordinate.z)*(Rq[2] - c.coordinate.z)*p + 2.0*(a.coordinate.x - b.coordinate.x)*(Rq[0] - c.coordinate.x)*(Rp[2] - a.coordinate.z)*(Rp[2]-Rq[2])*p - 2.0*(a.coordinate.x - b.coordinate.x)*(Rq[0] - c.coordinate.x)*(Rp[2]-Rq[2])*(Rq[2] - c.coordinate.z)*q + (a.coordinate.x - b.coordinate.x)*(Rq[0] - c.coordinate.x) + 2.0*(c.coordinate.x - d.coordinate.x)*(Rp[0] - a.coordinate.x)*(Rp[2] - a.coordinate.z)*(Rp[2]-Rq[2])*p - 2.0*(c.coordinate.x - d.coordinate.x)*(Rp[0] - a.coordinate.x)*(Rp[2]-Rq[2])*(Rq[2] - c.coordinate.z)*q + (c.coordinate.x - d.coordinate.x)*(Rp[0] - a.coordinate.x) - 2.0*(c.coordinate.x - d.coordinate.x)*(Rp[0]-Rq[0])*(Rp[2] - a.coordinate.z)*(Rq[2] - c.coordinate.z)*q + 2.0*(Rp[0] - a.coordinate.x)*(Rp[0]-Rq[0])*(Rp[2] - a.coordinate.z)*(Rq[2] - c.coordinate.z)*p + 2.0*(Rp[0] - a.coordinate.x)*(Rq[0] - c.coordinate.x)*(Rp[2] - a.coordinate.z)*(Rp[2]-Rq[2])*p - 2.0*(Rp[0] - a.coordinate.x)*(Rq[0] - c.coordinate.x)*(Rp[2]-Rq[2])*(Rq[2] - c.coordinate.z)*q + (Rp[0] - a.coordinate.x)*(Rq[0] - c.coordinate.x) - 2.0*(Rp[0]-Rq[0])*(Rq[0] - c.coordinate.x)*(Rp[2] - a.coordinate.z)*(Rq[2] - c.coordinate.z)*q + (Rp[2] - a.coordinate.z)*(Rq[2] - c.coordinate.z))/(p + q)) * Boys[1]
                + ((-16.0*(a.coordinate.x - b.coordinate.x)*(c.coordinate.x - d.coordinate.x)*((Rp[2]-Rq[2])*(Rp[2]-Rq[2]))*p*q + 16.0*(a.coordinate.x - b.coordinate.x)*(Rp[0]-Rq[0])*(Rp[2] - a.coordinate.z)*(Rp[2]-Rq[2])*(p*p) - 16.0*(a.coordinate.x - b.coordinate.x)*(Rp[0]-Rq[0])*(Rp[2]-Rq[2])*(Rq[2] - c.coordinate.z)*p*q + 8.0*(a.coordinate.x - b.coordinate.x)*(Rp[0]-Rq[0])*p - 16.0*(a.coordinate.x - b.coordinate.x)*(Rq[0] - c.coordinate.x)*((Rp[2]-Rq[2])*(Rp[2]-Rq[2]))*p*q - 16.0*(c.coordinate.x - d.coordinate.x)*(Rp[0] - a.coordinate.x)*((Rp[2]-Rq[2])*(Rp[2]-Rq[2]))*p*q - 16.0*(c.coordinate.x - d.coordinate.x)*(Rp[0]-Rq[0])*(Rp[2] - a.coordinate.z)*(Rp[2]-Rq[2])*p*q + 16.0*(c.coordinate.x - d.coordinate.x)*(Rp[0]-Rq[0])*(Rp[2]-Rq[2])*(Rq[2] - c.coordinate.z)*(q*q) - 8.0*(c.coordinate.x - d.coordinate.x)*(Rp[0]-Rq[0])*q + 16.0*(Rp[0] - a.coordinate.x)*(Rp[0]-Rq[0])*(Rp[2] - a.coordinate.z)*(Rp[2]-Rq[2])*(p*p) - 16.0*(Rp[0] - a.coordinate.x)*(Rp[0]-Rq[0])*(Rp[2]-Rq[2])*(Rq[2] - c.coordinate.z)*p*q + 8.0*(Rp[0] - a.coordinate.x)*(Rp[0]-Rq[0])*p - 16.0*(Rp[0] - a.coordinate.x)*(Rq[0] - c.coordinate.x)*((Rp[2]-Rq[2])*(Rp[2]-Rq[2]))*p*q - 16.0*((Rp[0]-Rq[0])*(Rp[0]-Rq[0]))*(Rp[2] - a.coordinate.z)*(Rq[2] - c.coordinate.z)*p*q - 16.0*(Rp[0]-Rq[0])*(Rq[0] - c.coordinate.x)*(Rp[2] - a.coordinate.z)*(Rp[2]-Rq[2])*p*q + 16.0*(Rp[0]-Rq[0])*(Rq[0] - c.coordinate.x)*(Rp[2]-Rq[2])*(Rq[2] - c.coordinate.z)*(q*q) - 8.0*(Rp[0]-Rq[0])*(Rq[0] - c.coordinate.x)*q + 8.0*(Rp[2] - a.coordinate.z)*(Rp[2]-Rq[2])*p - 8.0*(Rp[2]-Rq[2])*(Rq[2] - c.coordinate.z)*q + 4.0)/(16.0*(p*p) + 32.0*p*q + 16.0*(q*q))) * Boys[2]
                + (p*q*(-2.0*(a.coordinate.x - b.coordinate.x)*(Rp[0]-Rq[0])*((Rp[2]-Rq[2])*(Rp[2]-Rq[2]))*p + 2.0*(c.coordinate.x - d.coordinate.x)*(Rp[0]-Rq[0])*((Rp[2]-Rq[2])*(Rp[2]-Rq[2]))*q - 2.0*(Rp[0] - a.coordinate.x)*(Rp[0]-Rq[0])*((Rp[2]-Rq[2])*(Rp[2]-Rq[2]))*p - 2.0*((Rp[0]-Rq[0])*(Rp[0]-Rq[0]))*(Rp[2] - a.coordinate.z)*(Rp[2]-Rq[2])*p + 2.0*((Rp[0]-Rq[0])*(Rp[0]-Rq[0]))*(Rp[2]-Rq[2])*(Rq[2] - c.coordinate.z)*q - ((Rp[0]-Rq[0])*(Rp[0]-Rq[0])) + 2.0*(Rp[0]-Rq[0])*(Rq[0] - c.coordinate.x)*((Rp[2]-Rq[2])*(Rp[2]-Rq[2]))*q - ((Rp[2]-Rq[2])*(Rp[2]-Rq[2])))/(2.0*(p*p*p) + 6.0*(p*p)*q + 6.0*p*(q*q) + 2.0*(q*q*q))) * Boys[3]
                + (((Rp[0]-Rq[0])*(Rp[0]-Rq[0]))*((Rp[2]-Rq[2])*(Rp[2]-Rq[2]))*(p*p)*(q*q)/((p*p*p*p) + 4.0*(p*p*p)*q + 6.0*(p*p)*(q*q) + 4.0*p*(q*q*q) + (q*q*q*q))) * Boys[4]);
    // [zy|zy] = [21|21]
    upper_bound_factors[7] = coefAndNorm * (((Rp[2] - a.coordinate.z)*(Rq[2] - c.coordinate.z)*((a.coordinate.y - b.coordinate.y)*(c.coordinate.y - d.coordinate.y) + (a.coordinate.y - b.coordinate.y)*(Rq[1] - c.coordinate.y) + (c.coordinate.y - d.coordinate.y)*(Rp[1] - a.coordinate.y) + (Rp[1] - a.coordinate.y)*(Rq[1] - c.coordinate.y))) * Boys[0]
                + (0.5*(2.0*(a.coordinate.y - b.coordinate.y)*(c.coordinate.y - d.coordinate.y)*(Rp[2] - a.coordinate.z)*(Rp[2]-Rq[2])*p - 2.0*(a.coordinate.y - b.coordinate.y)*(c.coordinate.y - d.coordinate.y)*(Rp[2]-Rq[2])*(Rq[2] - c.coordinate.z)*q + (a.coordinate.y - b.coordinate.y)*(c.coordinate.y - d.coordinate.y) + 2.0*(a.coordinate.y - b.coordinate.y)*(Rp[1]-Rq[1])*(Rp[2] - a.coordinate.z)*(Rq[2] - c.coordinate.z)*p + 2.0*(a.coordinate.y - b.coordinate.y)*(Rq[1] - c.coordinate.y)*(Rp[2] - a.coordinate.z)*(Rp[2]-Rq[2])*p - 2.0*(a.coordinate.y - b.coordinate.y)*(Rq[1] - c.coordinate.y)*(Rp[2]-Rq[2])*(Rq[2] - c.coordinate.z)*q + (a.coordinate.y - b.coordinate.y)*(Rq[1] - c.coordinate.y) + 2.0*(c.coordinate.y - d.coordinate.y)*(Rp[1] - a.coordinate.y)*(Rp[2] - a.coordinate.z)*(Rp[2]-Rq[2])*p - 2.0*(c.coordinate.y - d.coordinate.y)*(Rp[1] - a.coordinate.y)*(Rp[2]-Rq[2])*(Rq[2] - c.coordinate.z)*q + (c.coordinate.y - d.coordinate.y)*(Rp[1] - a.coordinate.y) - 2.0*(c.coordinate.y - d.coordinate.y)*(Rp[1]-Rq[1])*(Rp[2] - a.coordinate.z)*(Rq[2] - c.coordinate.z)*q + 2.0*(Rp[1] - a.coordinate.y)*(Rp[1]-Rq[1])*(Rp[2] - a.coordinate.z)*(Rq[2] - c.coordinate.z)*p + 2.0*(Rp[1] - a.coordinate.y)*(Rq[1] - c.coordinate.y)*(Rp[2] - a.coordinate.z)*(Rp[2]-Rq[2])*p - 2.0*(Rp[1] - a.coordinate.y)*(Rq[1] - c.coordinate.y)*(Rp[2]-Rq[2])*(Rq[2] - c.coordinate.z)*q + (Rp[1] - a.coordinate.y)*(Rq[1] - c.coordinate.y) - 2.0*(Rp[1]-Rq[1])*(Rq[1] - c.coordinate.y)*(Rp[2] - a.coordinate.z)*(Rq[2] - c.coordinate.z)*q + (Rp[2] - a.coordinate.z)*(Rq[2] - c.coordinate.z))/(p + q)) * Boys[1]
                + ((-16.0*(a.coordinate.y - b.coordinate.y)*(c.coordinate.y - d.coordinate.y)*((Rp[2]-Rq[2])*(Rp[2]-Rq[2]))*p*q + 16.0*(a.coordinate.y - b.coordinate.y)*(Rp[1]-Rq[1])*(Rp[2] - a.coordinate.z)*(Rp[2]-Rq[2])*(p*p) - 16.0*(a.coordinate.y - b.coordinate.y)*(Rp[1]-Rq[1])*(Rp[2]-Rq[2])*(Rq[2] - c.coordinate.z)*p*q + 8.0*(a.coordinate.y - b.coordinate.y)*(Rp[1]-Rq[1])*p - 16.0*(a.coordinate.y - b.coordinate.y)*(Rq[1] - c.coordinate.y)*((Rp[2]-Rq[2])*(Rp[2]-Rq[2]))*p*q - 16.0*(c.coordinate.y - d.coordinate.y)*(Rp[1] - a.coordinate.y)*((Rp[2]-Rq[2])*(Rp[2]-Rq[2]))*p*q - 16.0*(c.coordinate.y - d.coordinate.y)*(Rp[1]-Rq[1])*(Rp[2] - a.coordinate.z)*(Rp[2]-Rq[2])*p*q + 16.0*(c.coordinate.y - d.coordinate.y)*(Rp[1]-Rq[1])*(Rp[2]-Rq[2])*(Rq[2] - c.coordinate.z)*(q*q) - 8.0*(c.coordinate.y - d.coordinate.y)*(Rp[1]-Rq[1])*q + 16.0*(Rp[1] - a.coordinate.y)*(Rp[1]-Rq[1])*(Rp[2] - a.coordinate.z)*(Rp[2]-Rq[2])*(p*p) - 16.0*(Rp[1] - a.coordinate.y)*(Rp[1]-Rq[1])*(Rp[2]-Rq[2])*(Rq[2] - c.coordinate.z)*p*q + 8.0*(Rp[1] - a.coordinate.y)*(Rp[1]-Rq[1])*p - 16.0*(Rp[1] - a.coordinate.y)*(Rq[1] - c.coordinate.y)*((Rp[2]-Rq[2])*(Rp[2]-Rq[2]))*p*q - 16.0*((Rp[1]-Rq[1])*(Rp[1]-Rq[1]))*(Rp[2] - a.coordinate.z)*(Rq[2] - c.coordinate.z)*p*q - 16.0*(Rp[1]-Rq[1])*(Rq[1] - c.coordinate.y)*(Rp[2] - a.coordinate.z)*(Rp[2]-Rq[2])*p*q + 16.0*(Rp[1]-Rq[1])*(Rq[1] - c.coordinate.y)*(Rp[2]-Rq[2])*(Rq[2] - c.coordinate.z)*(q*q) - 8.0*(Rp[1]-Rq[1])*(Rq[1] - c.coordinate.y)*q + 8.0*(Rp[2] - a.coordinate.z)*(Rp[2]-Rq[2])*p - 8.0*(Rp[2]-Rq[2])*(Rq[2] - c.coordinate.z)*q + 4.0)/(16.0*(p*p) + 32.0*p*q + 16.0*(q*q))) * Boys[2]
                + (p*q*(-2.0*(a.coordinate.y - b.coordinate.y)*(Rp[1]-Rq[1])*((Rp[2]-Rq[2])*(Rp[2]-Rq[2]))*p + 2.0*(c.coordinate.y - d.coordinate.y)*(Rp[1]-Rq[1])*((Rp[2]-Rq[2])*(Rp[2]-Rq[2]))*q - 2.0*(Rp[1] - a.coordinate.y)*(Rp[1]-Rq[1])*((Rp[2]-Rq[2])*(Rp[2]-Rq[2]))*p - 2.0*((Rp[1]-Rq[1])*(Rp[1]-Rq[1]))*(Rp[2] - a.coordinate.z)*(Rp[2]-Rq[2])*p + 2.0*((Rp[1]-Rq[1])*(Rp[1]-Rq[1]))*(Rp[2]-Rq[2])*(Rq[2] - c.coordinate.z)*q - ((Rp[1]-Rq[1])*(Rp[1]-Rq[1])) + 2.0*(Rp[1]-Rq[1])*(Rq[1] - c.coordinate.y)*((Rp[2]-Rq[2])*(Rp[2]-Rq[2]))*q - ((Rp[2]-Rq[2])*(Rp[2]-Rq[2])))/(2.0*(p*p*p) + 6.0*(p*p)*q + 6.0*p*(q*q) + 2.0*(q*q*q))) * Boys[3]
                + (((Rp[1]-Rq[1])*(Rp[1]-Rq[1]))*((Rp[2]-Rq[2])*(Rp[2]-Rq[2]))*(p*p)*(q*q)/((p*p*p*p) + 4.0*(p*p*p)*q + 6.0*(p*p)*(q*q) + 4.0*p*(q*q*q) + (q*q*q*q))) * Boys[4]);
    // [zz|zz] = [22|22]
    upper_bound_factors[8] = coefAndNorm * (((a.coordinate.z - b.coordinate.z)*(c.coordinate.z - d.coordinate.z)*(Rp[2] - a.coordinate.z)*(Rq[2] - c.coordinate.z) + (a.coordinate.z - b.coordinate.z)*(Rp[2] - a.coordinate.z)*((Rq[2] - c.coordinate.z)*(Rq[2] - c.coordinate.z)) + 0.5*(a.coordinate.z - b.coordinate.z)*(Rp[2] - a.coordinate.z)/q + (c.coordinate.z - d.coordinate.z)*((Rp[2] - a.coordinate.z)*(Rp[2] - a.coordinate.z))*(Rq[2] - c.coordinate.z) + 0.5*(c.coordinate.z - d.coordinate.z)*(Rq[2] - c.coordinate.z)/p + ((Rp[2] - a.coordinate.z)*(Rp[2] - a.coordinate.z))*((Rq[2] - c.coordinate.z)*(Rq[2] - c.coordinate.z)) + 0.5*((Rp[2] - a.coordinate.z)*(Rp[2] - a.coordinate.z))/q + 0.5*((Rq[2] - c.coordinate.z)*(Rq[2] - c.coordinate.z))/p + 0.25/(p*q)) * Boys[0]
                + (0.03125*(32.0*(a.coordinate.z - b.coordinate.z)*(c.coordinate.z - d.coordinate.z)*(Rp[2] - a.coordinate.z)*(Rp[2]-Rq[2])*(p*p)*q - 32.0*(a.coordinate.z - b.coordinate.z)*(c.coordinate.z - d.coordinate.z)*(Rp[2]-Rq[2])*(Rq[2] - c.coordinate.z)*p*(q*q) + 16.0*(a.coordinate.z - b.coordinate.z)*(c.coordinate.z - d.coordinate.z)*p*q + 64.0*(a.coordinate.z - b.coordinate.z)*(Rp[2] - a.coordinate.z)*(Rp[2]-Rq[2])*(Rq[2] - c.coordinate.z)*(p*p)*q - 16.0*(a.coordinate.z - b.coordinate.z)*(Rp[2] - a.coordinate.z)*(p*p) - 32.0*(a.coordinate.z - b.coordinate.z)*(Rp[2]-Rq[2])*((Rq[2] - c.coordinate.z)*(Rq[2] - c.coordinate.z))*p*(q*q) - 16.0*(a.coordinate.z - b.coordinate.z)*(Rp[2]-Rq[2])*p*q + 32.0*(a.coordinate.z - b.coordinate.z)*(Rq[2] - c.coordinate.z)*p*q + 32.0*(c.coordinate.z - d.coordinate.z)*((Rp[2] - a.coordinate.z)*(Rp[2] - a.coordinate.z))*(Rp[2]-Rq[2])*(p*p)*q - 64.0*(c.coordinate.z - d.coordinate.z)*(Rp[2] - a.coordinate.z)*(Rp[2]-Rq[2])*(Rq[2] - c.coordinate.z)*p*(q*q) + 32.0*(c.coordinate.z - d.coordinate.z)*(Rp[2] - a.coordinate.z)*p*q + 16.0*(c.coordinate.z - d.coordinate.z)*(Rp[2]-Rq[2])*p*q - 16.0*(c.coordinate.z - d.coordinate.z)*(Rq[2] - c.coordinate.z)*(q*q) + 64.0*((Rp[2] - a.coordinate.z)*(Rp[2] - a.coordinate.z))*(Rp[2]-Rq[2])*(Rq[2] - c.coordinate.z)*(p*p)*q - 16.0*((Rp[2] - a.coordinate.z)*(Rp[2] - a.coordinate.z))*(p*p) - 64.0*(Rp[2] - a.coordinate.z)*(Rp[2]-Rq[2])*((Rq[2] - c.coordinate.z)*(Rq[2] - c.coordinate.z))*p*(q*q) - 32.0*(Rp[2] - a.coordinate.z)*(Rp[2]-Rq[2])*p*q + 64.0*(Rp[2] - a.coordinate.z)*(Rq[2] - c.coordinate.z)*p*q + 32.0*(Rp[2]-Rq[2])*(Rq[2] - c.coordinate.z)*p*q - 16.0*((Rq[2] - c.coordinate.z)*(Rq[2] - c.coordinate.z))*(q*q) - 8.0*p - 8.0*q)/(p*q*(p + q))) * Boys[1]
                + ((-16.0*(a.coordinate.z - b.coordinate.z)*(c.coordinate.z - d.coordinate.z)*((Rp[2]-Rq[2])*(Rp[2]-Rq[2]))*p*q + 16.0*(a.coordinate.z - b.coordinate.z)*(Rp[2] - a.coordinate.z)*((Rp[2]-Rq[2])*(Rp[2]-Rq[2]))*(p*p) - 32.0*(a.coordinate.z - b.coordinate.z)*((Rp[2]-Rq[2])*(Rp[2]-Rq[2]))*(Rq[2] - c.coordinate.z)*p*q + 24.0*(a.coordinate.z - b.coordinate.z)*(Rp[2]-Rq[2])*p - 32.0*(c.coordinate.z - d.coordinate.z)*(Rp[2] - a.coordinate.z)*((Rp[2]-Rq[2])*(Rp[2]-Rq[2]))*p*q + 16.0*(c.coordinate.z - d.coordinate.z)*((Rp[2]-Rq[2])*(Rp[2]-Rq[2]))*(Rq[2] - c.coordinate.z)*(q*q) - 24.0*(c.coordinate.z - d.coordinate.z)*(Rp[2]-Rq[2])*q + 16.0*((Rp[2] - a.coordinate.z)*(Rp[2] - a.coordinate.z))*((Rp[2]-Rq[2])*(Rp[2]-Rq[2]))*(p*p) - 64.0*(Rp[2] - a.coordinate.z)*((Rp[2]-Rq[2])*(Rp[2]-Rq[2]))*(Rq[2] - c.coordinate.z)*p*q + 48.0*(Rp[2] - a.coordinate.z)*(Rp[2]-Rq[2])*p + 16.0*((Rp[2]-Rq[2])*(Rp[2]-Rq[2]))*((Rq[2] - c.coordinate.z)*(Rq[2] - c.coordinate.z))*(q*q) + 8.0*((Rp[2]-Rq[2])*(Rp[2]-Rq[2]))*p + 8.0*((Rp[2]-Rq[2])*(Rp[2]-Rq[2]))*q - 48.0*(Rp[2]-Rq[2])*(Rq[2] - c.coordinate.z)*q + 12.0)/(16.0*(p*p) + 32.0*p*q + 16.0*(q*q))) * Boys[2]
                + (((Rp[2]-Rq[2])*(Rp[2]-Rq[2]))*p*q*(-2.0*(a.coordinate.z - b.coordinate.z)*(Rp[2]-Rq[2])*p + 2.0*(c.coordinate.z - d.coordinate.z)*(Rp[2]-Rq[2])*q - 4.0*(Rp[2] - a.coordinate.z)*(Rp[2]-Rq[2])*p + 4.0*(Rp[2]-Rq[2])*(Rq[2] - c.coordinate.z)*q - 6.0)/(2.0*(p*p*p) + 6.0*(p*p)*q + 6.0*p*(q*q) + 2.0*(q*q*q))) * Boys[3]
                + (((Rp[2]-Rq[2])*(Rp[2]-Rq[2])*(Rp[2]-Rq[2])*(Rp[2]-Rq[2]))*(p*p)*(q*q)/((p*p*p*p) + 4.0*(p*p*p)*q + 6.0*(p*p)*(q*q) + 4.0*p*(q*q*q) + (q*q*q*q))) * Boys[4]);
}

__global__
void get_schwarz_upper_bound_factors_ss(
    const PrimitiveShell* g_shell, const real_t* g_cgto_normalization_factors, 
    const ShellTypeInfo shell_s0, const ShellTypeInfo shell_s1, 
    const size_t head, const size_t num_ss, const double* g_boys_grid, 
    double* g_upper_bound_factors)
{
    const int id = blockDim.x * blockIdx.x + threadIdx.x;
    if (id >= num_ss) {
        return;
    }

    const size_t2 ab = index1to2(id, true);
    const size_t primitive_index_a = ab.x+shell_s0.start_index;
    const size_t primitive_index_b = ab.y+shell_s1.start_index;
    const PrimitiveShell a = g_shell[primitive_index_a];
    const PrimitiveShell b = g_shell[primitive_index_b];

    const double upper_bound_factor = calculate_upper_bound_factor_ss(a, b, g_boys_grid);
    g_upper_bound_factors[id] = __dsqrt_rn(upper_bound_factor);
}


__global__
void get_schwarz_upper_bound_factors_sp(
    const PrimitiveShell* g_shell, const real_t* g_cgto_normalization_factors, 
    const ShellTypeInfo shell_s0, const ShellTypeInfo shell_s1, 
    const size_t num_ss, const size_t num_sp, const double* g_boys_grid, 
    double* g_max_upper_bound_factors)
{
    const int id = blockDim.x * blockIdx.x + threadIdx.x;
    if (id >= num_sp) {
        return;
    }

    const size_t2 ab = index1to2(id, false, shell_s1.count);
    const size_t primitive_index_a = ab.x+shell_s0.start_index;
    const size_t primitive_index_b = ab.y+shell_s1.start_index;
    const PrimitiveShell a = g_shell[primitive_index_a];
    const PrimitiveShell b = g_shell[primitive_index_b];

    double upper_bound_factors[SP_TYPES];
    calculate_upper_bound_factors_sp(a, b, g_boys_grid, upper_bound_factors);

    double max_upper_bound_factor = 0.0;
    for (int i = 0; i < SP_TYPES; ++i) {
        if (max_upper_bound_factor < upper_bound_factors[i]) {
            max_upper_bound_factor = upper_bound_factors[i];
        }
    }
    g_max_upper_bound_factors[num_ss + id] = __dsqrt_rn(max_upper_bound_factor);
}


__global__
void get_schwarz_upper_bound_factors_pp(
    const PrimitiveShell* g_shell, const real_t* g_cgto_normalization_factors, 
    const ShellTypeInfo shell_s0, const ShellTypeInfo shell_s1, 
    const size_t num_ss_sp, const size_t num_pp, const double* g_boys_grid, 
    double* g_max_upper_bound_factors)
{
    const int id = blockDim.x * blockIdx.x + threadIdx.x;
    if (id >= num_pp) {
        return;
    }

    const size_t2 ab = index1to2(id, true);
    const size_t primitive_index_a = ab.x+shell_s0.start_index;
    const size_t primitive_index_b = ab.y+shell_s1.start_index;
    const PrimitiveShell a = g_shell[primitive_index_a];
    const PrimitiveShell b = g_shell[primitive_index_b];

    double upper_bound_factors[PP_TYPES];
    calculate_upper_bound_factors_pp(a, b, g_boys_grid, upper_bound_factors);

    double max_upper_bound_factor = 0.0;
    for (int i = 0; i < PP_TYPES; ++i) {
        if (max_upper_bound_factor < upper_bound_factors[i]) {
            max_upper_bound_factor = upper_bound_factors[i];
        }
    }
    g_max_upper_bound_factors[num_ss_sp + id] = __dsqrt_rn(max_upper_bound_factor);
}




__global__
void get_schwarz_upper_bound_factors_general(
    const PrimitiveShell* g_shell, const real_t* g_cgto_normalization_factors, 
    const ShellTypeInfo shell_s0, const ShellTypeInfo shell_s1, 
    const size_t head, const size_t num_bra, const double* g_boys_grid, 
    double* g_max_upper_bound_factors)
{
    double max_upper_bound_factor = 0.0;

    // 通し番号indexの計算
    const size_t id = blockIdx.x * blockDim.x + threadIdx.x;
    if (id >= num_bra) return;

    const double size_Rmid=1377;
    double R_mid[3*1377];   //使い捨ての中間体R_mid
    double R[2925];         //解を格納する配列R
    double thread_val=0.0;  //thread内で結果を保持するメモリ
    
    //// Compute 4D index from thread id
    //const size_t2 abcd = index1to2(id, true);
    //const size_t2 ab = index1to2(abcd.x, shell_s0.start_index == shell_s1.start_index, shell_s1.count);
    //const size_t2 cd = index1to2(abcd.y, shell_s2.start_index == shell_s3.start_index, shell_s3.count);
    size_t2 ab;
    if (shell_s0.start_index == shell_s1.start_index) { // same shell type
        ab = index1to2(id, true);
    }
    else {
        ab = index1to2(id, false, shell_s1.count);      // different shell type
    }

    // Obtain primitive shells [ab|cd]
    const size_t primitive_index_a = ab.x+shell_s0.start_index;
    const size_t primitive_index_b = ab.y+shell_s1.start_index;
    const size_t primitive_index_c = primitive_index_a;
    const size_t primitive_index_d = primitive_index_b;

    const PrimitiveShell a = g_shell[primitive_index_a];
    const PrimitiveShell b = g_shell[primitive_index_b];
    const PrimitiveShell c = g_shell[primitive_index_c];
    const PrimitiveShell d = g_shell[primitive_index_d];
        
    // Obtain basis index (ij|kl)
    //const size_t size_a = a.basis_index;
    //const size_t size_b = b.basis_index;
    //const size_t size_c = c.basis_index;
    //const size_t size_d = d.basis_index;

    //bool is_bra_symmetric = (primitive_index_a == primitive_index_b);
    //bool is_ket_symmetric = (primitive_index_c == primitive_index_d);
    //bool is_braket_symmetric = (primitive_index_a == primitive_index_c && primitive_index_b == primitive_index_d);
    
    //使用データを取得，レジスタに書き込み

    //指数部
    const double alpha = a.exponent;
    const double beta  = b.exponent;
    const double p = alpha+beta;
    const double q = alpha+beta;
    const double xi = p*q / (p+q);

    //係数部
    const double coef_a = a.coefficient;
    const double coef_b = b.coefficient;
    const double coef_c = c.coefficient;
    const double coef_d = d.coefficient;

    //座標
    const double pos_A[3] = {a.coordinate.x, a.coordinate.y, a.coordinate.z};
    const double pos_B[3] = {b.coordinate.x, b.coordinate.y, b.coordinate.z};
    const double pos_C[3] = {c.coordinate.x, c.coordinate.y, c.coordinate.z};
    const double pos_D[3] = {d.coordinate.x, d.coordinate.y, d.coordinate.z};

    const double pos_P[3] = {(alpha*pos_A[0]+beta*pos_B[0])/(alpha+beta), (alpha*pos_A[1]+beta*pos_B[1])/(alpha+beta), (alpha*pos_A[2]+beta*pos_B[2])/(alpha+beta)};
    const double pos_Q[3] = {(alpha*pos_C[0]+beta*pos_D[0])/(alpha+beta), (alpha*pos_C[1]+beta*pos_D[1])/(alpha+beta), (alpha*pos_C[2]+beta*pos_D[2])/(alpha+beta)};

    //角運動量の総和
    const int orbital_A = a.shell_type;
    const int orbital_B = b.shell_type;
    const int orbital_C = c.shell_type;
    const int orbital_D = d.shell_type;

    //軌道間距離の二乗
    const double dist = ((pos_P[0]-pos_Q[0])*(pos_P[0]-pos_Q[0]) + (pos_P[1]-pos_Q[1])*(pos_P[1]-pos_Q[1]) + (pos_P[2]-pos_Q[2])*(pos_P[2]-pos_Q[2]));


    const int K=orbital_A + orbital_B + orbital_C + orbital_D;
    
    double Boys[25];
    getIncrementalBoys(K, xi*dist, g_boys_grid, Boys);

    //Boys関数の値を計算(Single)
    for(int i=0; i <= K; i++){
        Boys[i] *= (right2left_binary_woif((-2*xi), i));
    }

    //各ERIを計算
    //事前計算⇒実際のERI計算の順に実行
    //p軌道の場合lmn_aが0:px, 1:py, 2:pz軌道のように対応付け
    //d以上はconstant配列のloop_to_angを参照

    
    
    double Norm_A, Norm_B;//, Norm_C, Norm_D;
    double Norm;

    int t,u,v,tau,nu,phi;
    int t_max;
    int u_max;
    int v_max;
    int tau_max;
    int nu_max;
    int phi_max;

    int tid=0;
    
    int iter_max;

    // 方位量子数l,m,nの値をループ変数から導出
    for(int lmn_a=0; lmn_a<comb_max(orbital_A); lmn_a++){
        int l1=loop_to_ang[orbital_A][lmn_a][0]; int m1=loop_to_ang[orbital_A][lmn_a][1]; int n1=loop_to_ang[orbital_A][lmn_a][2];
        Norm_A = calcNorm(alpha, l1, m1, n1);
        for(int lmn_b=0; lmn_b<comb_max(orbital_B); lmn_b++){                  
            int l2=loop_to_ang[orbital_B][lmn_b][0]; int m2=loop_to_ang[orbital_B][lmn_b][1]; int n2=loop_to_ang[orbital_B][lmn_b][2];
            Norm_B = calcNorm(beta, l2, m2, n2);
            //for(int lmn_c=0; lmn_c<comb_max(orbital_C); lmn_c++){
            //    int l3=loop_to_ang[orbital_C][lmn_c][0]; int m3=loop_to_ang[orbital_C][lmn_c][1]; int n3=loop_to_ang[orbital_C][lmn_c][2];
            //    Norm_C = calcNorm(alpha, l3, m3, n3);
            //    for(int lmn_d=0; lmn_d<comb_max(orbital_D); lmn_d++){
            //        int l4=loop_to_ang[orbital_D][lmn_d][0]; int m4=loop_to_ang[orbital_D][lmn_d][1]; int n4=loop_to_ang[orbital_D][lmn_d][2];
            //        Norm_D = calcNorm(beta, l4, m4, n4);
            //        Norm = Norm_A * Norm_B * Norm_C * Norm_D;

            int l3 = l1; int m3 = m1; int n3 = n1;
            int l4 = l2; int m4 = m2; int n4 = n2;
            Norm = Norm_A * Norm_B * Norm_A * Norm_B;


            // 前回のループの計算結果をクリア
            thread_val=0.0;
            // 事前計算部
            //初期値：Boysとして計算済
            //Step 0: Boys関数評価
            R[0]=Boys[0];
            for(int i=0; i <= K; i++){
                R_mid[i]=Boys[i];
            }
            
            // ループ変数の設定
            t_max = l1+l2+1;
            u_max = m1+m2+1;
            v_max = n1+n2+1;
            tau_max = l3+l4+1;
            nu_max = m3+m4+1;
            phi_max = n3+n4+1;

            for(int k=1; k <= K; k++){//Step 1~Kの計算
                // t+u+v=kとなる全ペアに対して適切な計算
                // 0~K-kまでそれぞれ必要⇒ループでやる


                for(int z=0; z<=(K+1)*comb_max(k); z++){
                
                    int i = z/comb_max(k);

                    if(i <= K-k){
                        t=tuv_list[(k*(k+1)*(k+2))/6 + z%comb_max(k)][0];
                        u=tuv_list[(k*(k+1)*(k+2))/6 + z%comb_max(k)][1];
                        v=tuv_list[(k*(k+1)*(k+2))/6 + z%comb_max(k)][2];


                        if((t <= (t_max+tau_max-2)) && (u <= (u_max+nu_max-2)) && (v <= (v_max+phi_max-2))){
                            if(t >= 1){
                                R_mid[calc_Idx_Rmid(k,u,v,i,comb_max(k),size_Rmid)] = (pos_P[0] - pos_Q[0])*R_mid[calc_Idx_Rmid(k-1,u,v,i+1,comb_max(k-1),size_Rmid)] + (t-1)*R_mid[calc_Idx_Rmid(k-2,u,v,i+1,comb_max(k-2),size_Rmid)];
                            }
                            else if(u >= 1){
                                R_mid[calc_Idx_Rmid(k,u,v,i,comb_max(k),size_Rmid)] = (pos_P[1] - pos_Q[1])*R_mid[calc_Idx_Rmid(k-1,u-1,v,i+1,comb_max(k-1),size_Rmid)] + (u-1)*R_mid[calc_Idx_Rmid(k-2,u-2,v,i+1,comb_max(k-2),size_Rmid)];
                            }
                            else{
                                R_mid[calc_Idx_Rmid(k,u,v,i,comb_max(k),size_Rmid)] = (pos_P[2] - pos_Q[2])*R_mid[calc_Idx_Rmid(k-1,u,v-1,i+1,comb_max(k-1),size_Rmid)] + (v-1)*R_mid[calc_Idx_Rmid(k-2,u,v-2,i+1,comb_max(k-2),size_Rmid)];
                            }
                        }
                    }
                }//step kの全計算が終了


                //必要な結果を配列Rに書き込み
                for(int i=0; i<=comb_max(k); i++){
                    R[static_cast<int>(k*(k+1)*(k+2)/6) + i] = R_mid[(k%3)*static_cast<int>(size_Rmid) + i];

                }

            }
            //事前計算完了
            

            // ERI計算部
            iter_max=t_max*u_max*v_max*tau_max*nu_max*phi_max + 1;
            for(int i=0; i<iter_max; i++){
                // MD法6重ループを管理する6変数を各Threadに割り当て
                tid=i;
                phi = tid % phi_max;
                tid /= phi_max;
                nu = tid % nu_max;
                tid /= nu_max;
                tau = tid % tau_max;
                tid /= tau_max;
                v = tid % v_max;
                tid /= v_max;
                u = tid % u_max;
                tid /= u_max;
                t=tid;


                double my_val = 0.0;

                ////特定の(t,u,v,tau,nu,phi)に対応する結果をmy_valとして持つ
                if(t <= t_max-1 && u<=u_max-1 && v<=v_max-1 && tau<=tau_max-1 && nu<=nu_max-1 && phi<=phi_max-1){
                    int k=t+u+v+tau+nu+phi;
                    my_val = MD_Et_NonRecursion(l1, l2, t, alpha, beta, (pos_A[0]-pos_B[0])) * MD_Et_NonRecursion(m1, m2, u, alpha, beta, (pos_A[1]-pos_B[1])) * MD_Et_NonRecursion(n1, n2, v, alpha, beta, (pos_A[2]-pos_B[2])) * MD_Et_NonRecursion(l3, l4, tau, alpha, beta, (pos_C[0]-pos_D[0])) * MD_Et_NonRecursion(m3, m4, nu, alpha, beta, (pos_C[1]-pos_D[1])) * MD_Et_NonRecursion(n3, n4, phi, alpha, beta, (pos_C[2]-pos_D[2])) * (1 - 2*((tau+nu+phi)&1)) * R[k*(k+1)*(k+2)/6 + calc_Idx_Rmid(k,u+nu,v+phi,0,0,0)];
                    // thread_valに足しこんでMD法の結果を得る
                    thread_val += my_val*2 * M_PI_2_5 /(p*q * sqrt((p+q)))  *coef_a*coef_b*coef_c*coef_d;
                } 
            }

            const double upper_bound_factor = Norm * thread_val;
            if (fabs(max_upper_bound_factor) < fabs(upper_bound_factor)) {
                max_upper_bound_factor = upper_bound_factor;
            }
                //}
            //}
        }
    }
    g_max_upper_bound_factors[head + id] = __dsqrt_rn(max_upper_bound_factor);
}







__global__
void get_schwarz_upper_bound_factors_aux_general(
    const PrimitiveShell* g_shell_aux, const real_t* g_aux_cgto_normalization_factors, 
    const ShellTypeInfo shell_s0,
    const size_t head, const size_t num_bra, const double* g_boys_grid, 
    double* g_max_upper_bound_factors_aux)
{
    double max_upper_bound_factor = 0.0;

    // 通し番号indexの計算
    const size_t id = blockIdx.x * blockDim.x + threadIdx.x;
    if (id >= num_bra) return;

    const double size_Rmid=1377;
    double R_mid[3*1377];   //使い捨ての中間体R_mid
    double R[2925];         //解を格納する配列R
    
    //// Compute index from thread id

    // Obtain primitive shells [ab|cd]
    const size_t primitive_index_a = id+shell_s0.start_index;
    const size_t primitive_index_b = primitive_index_a;

    const PrimitiveShell a = g_shell_aux[primitive_index_a];
    const PrimitiveShell b = g_shell_aux[primitive_index_b];
        

    //使用データを取得，レジスタに書き込み


    //指数部
    const double alpha = a.exponent;
    const double beta  = alpha;
    const double xi = alpha * beta / (alpha + beta);

    //係数部
    const double coef_a = a.coefficient;
    const double coef_b = b.coefficient;


    //座標
    const double pos_A[3] = {a.coordinate.x, a.coordinate.y, a.coordinate.z};
    const double pos_B[3] = {b.coordinate.x, b.coordinate.y, b.coordinate.z};


    //角運動量の総和
    const int orbital_A = a.shell_type;
    const int orbital_B = b.shell_type;


    //軌道間距離の二乗
    const double dist = ((pos_A[0]-pos_B[0])*(pos_A[0]-pos_B[0]) + (pos_A[1]-pos_B[1])*(pos_A[1]-pos_B[1]) + (pos_A[2]-pos_B[2])*(pos_A[2]-pos_B[2]));


    const int K = orbital_A + orbital_B;
    
    double Boys[25];
    getIncrementalBoys(K, xi*dist, g_boys_grid, Boys);

    //Boys関数の値を計算(Single)
    for(int i=0; i <= K; i++){
        Boys[i] *= (right2left_binary_woif((-2*xi), i));
    }

    //各ERIを計算
    //事前計算⇒実際のERI計算の順に実行
    //p軌道の場合lmn_aが0:px, 1:py, 2:pz軌道のように対応付け
    //d以上はconstant配列のloop_to_ang_RIを参照

    
    
    double Norm_A, Norm_B;

    int t,u,v;
    int t_max;
    int u_max;
    int v_max;
    int tau_max;
    int nu_max;
    int phi_max;


    // 方位量子数l,m,nの値をループ変数から導出
    for(int lmn_a=0; lmn_a<comb_max(orbital_A); lmn_a++){
        int l1=loop_to_ang_RI_[orbital_A][lmn_a][0]; int m1=loop_to_ang_RI_[orbital_A][lmn_a][1]; int n1=loop_to_ang_RI_[orbital_A][lmn_a][2];
        Norm_A = calcNorm(alpha, l1, m1, n1);

        int lmn_b = lmn_a;
        int l2 = l1, m2 = m1, n2 = n1;

        Norm_B = Norm_A;



        // 事前計算部
        //初期値：Boysとして計算済
        //Step 0: Boys関数評価
        R[0]=Boys[0];
        for(int i=0; i <= K; i++){
            R_mid[i]=Boys[i];
        }
                
        // ループ変数の設定
        t_max = l1+1;
        u_max = m1+1;
        v_max = n1+1;
        tau_max = l2+1;
        nu_max = m2+1;
        phi_max = n2+1;

        for(int k=1; k <= K; k++){//Step 1~Kの計算
            // t+u+v=kとなる全ペアに対して適切な計算
            // 0~K-kまでそれぞれ必要⇒ループでやる


            for(int z=0; z<=(K+1)*comb_max(k); z++){
                
                int i = z/comb_max(k);

                if(i <= K-k){
                    t=tuv_list[(k*(k+1)*(k+2))/6 + z%comb_max(k)][0];
                    u=tuv_list[(k*(k+1)*(k+2))/6 + z%comb_max(k)][1];
                    v=tuv_list[(k*(k+1)*(k+2))/6 + z%comb_max(k)][2];

                    if((t <= (t_max+tau_max-2)) && (u <= (u_max+nu_max-2)) && (v <= (v_max+phi_max-2))){
                        if(t >= 1){
                            R_mid[calc_Idx_Rmid(k,u,v,i,comb_max(k),size_Rmid)] = (pos_A[0] - pos_B[0])*R_mid[calc_Idx_Rmid(k-1,u,v,i+1,comb_max(k-1),size_Rmid)] + (t-1)*R_mid[calc_Idx_Rmid(k-2,u,v,i+1,comb_max(k-2),size_Rmid)];
                        }
                        else if(u >= 1){
                            R_mid[calc_Idx_Rmid(k,u,v,i,comb_max(k),size_Rmid)] = (pos_A[1] - pos_B[1])*R_mid[calc_Idx_Rmid(k-1,u-1,v,i+1,comb_max(k-1),size_Rmid)] + (u-1)*R_mid[calc_Idx_Rmid(k-2,u-2,v,i+1,comb_max(k-2),size_Rmid)];
                        }
                        else{
                            R_mid[calc_Idx_Rmid(k,u,v,i,comb_max(k),size_Rmid)] = (pos_A[2] - pos_B[2])*R_mid[calc_Idx_Rmid(k-1,u,v-1,i+1,comb_max(k-1),size_Rmid)] + (v-1)*R_mid[calc_Idx_Rmid(k-2,u,v-2,i+1,comb_max(k-2),size_Rmid)];
                        }
                    }
                }
            }//step kの全計算が終了


            //必要な結果を配列Rに書き込み
            for(int i=0; i<=comb_max(k); i++){
                R[static_cast<int>(k*(k+1)*(k+2)/6) + i] = R_mid[(k%3)*static_cast<int>(size_Rmid) + i];
            }

        }
        //事前計算完了
                

        // ERI計算部
        double my_val = 0.0;
        // ERI計算部
        double Et, Eu, Ev, Etau, Enu, Ephi;
        for(int t=0; t<l1+1; t++){
            Et =  MD_Et_NonRecursion(l1, 0, t, alpha, 0.0, 0.0);
            for(int u=0; u<m1+1; u++){
                Eu = MD_Et_NonRecursion(m1, 0, u, alpha, 0.0, 0.0);
                for(int v=0; v<n1+1; v++){
                    Ev = MD_Et_NonRecursion(n1, 0, v, alpha, 0.0, 0.0);
                    for(int tau=0; tau<l2+1; tau++){
                        Etau = MD_Et_NonRecursion(l2, 0, tau, beta, 0.0, 0.0);
                        for(int nu=0; nu<m2+1; nu++){
                            Enu = MD_Et_NonRecursion(m2, 0, nu, beta, 0.0, 0.0);
                            for(int phi=0; phi<n2+1; phi++){
                                Ephi = MD_Et_NonRecursion(n2, 0, phi, beta, 0.0, 0.0);
                                int k=t+u+v+tau+nu+phi;
                                my_val +=  Et * Eu * Ev * Etau * Enu * Ephi * (1 - 2*((tau+nu+phi)&1)) * R[k*(k+1)*(k+2)/6 + calc_Idx_Rmid(k,u+nu,v+phi,0,0,0)];
                                // my_val +=  Et * Eu * Ev * Etau * Enu * Ephi * (1 - 2*((tau+nu+phi)&1)) * R_GPU_Recursion(0, t+tau, u+nu, v+phi, P, Q, Boys);
                            }
                        }
                    }
                }
            }
        }


        const double upper_bound_factor = g_aux_cgto_normalization_factors[a.basis_index+lmn_a] * g_aux_cgto_normalization_factors[b.basis_index+lmn_b] * Norm_A * Norm_B * my_val*2 * M_PI_2_5 /(alpha * beta * sqrt((alpha + beta)))  *coef_a*coef_b;
        // const double upper_bound_factor = g_aux_cgto_normalization_factors[a.basis_index+lmn_a] * g_aux_cgto_normalization_factors[b.basis_index+lmn_b] * __dsqrt_rn(Norm_A * Norm_B * my_val*2 * M_PI_2_5 /(alpha * beta * sqrt((alpha + beta)))  *coef_a*coef_b);
        if (fabs(max_upper_bound_factor) < fabs(upper_bound_factor)) {
            max_upper_bound_factor = upper_bound_factor;
        }
        
    }


    g_max_upper_bound_factors_aux[head + id] = __dsqrt_rn(max_upper_bound_factor);
    // g_max_upper_bound_factors_aux[head + id] = max_upper_bound_factor;
}